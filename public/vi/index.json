[
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu Site-to-Site VPN với BGP và Redundancy",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nMục tiêu của Workshop Tổng quan lý thuyết Mô hình kiến trúc đề xuất Tình huống thực tế Những gì bạn sẽ học được Các công cụ và dịch vụ sử dụng Kiến thức cần có trước khi bắt đầu 🎯 Mục tiêu của Workshop Workshop này hướng dẫn bạn từng bước triển khai một kết nối Site-to-Site VPN giữa hạ tầng on-premises và Amazon VPC, sử dụng BGP (Border Gateway Protocol) để tự động hóa định tuyến và đảm bảo tính sẵn sàng cao (High Availability) nhờ vào nhiều tunnels dự phòng.\nBạn cũng sẽ học cách:\nGiám sát trạng thái VPN và lưu lượng. Tự động hóa cảnh báo và xử lý sự cố. Kiểm thử failover giữa các tunnel. Bảo vệ tunnel với các best practice bảo mật. Ước lượng chi phí và tối ưu hóa vận hành. 🧠 Tổng quan lý thuyết 🌐 Site-to-Site VPN là gì? Site-to-Site VPN là một phương thức kết nối an toàn giữa hai mạng riêng biệt thông qua internet bằng giao thức IPSec. VPN cho phép các máy chủ, ứng dụng ở hai đầu kết nối với nhau như trong cùng một mạng nội bộ.\nLợi ích: Không yêu cầu người dùng kết nối thủ công như Client VPN, mã hóa end-to-end, duy trì kết nối ổn định 24/7.\n🧭 BGP là gì và tại sao nên dùng? BGP (Border Gateway Protocol) là giao thức định tuyến lớp mạng được thiết kế để trao đổi thông tin giữa các hệ thống mạng tự trị (AS). Trong VPN, BGP mang lại:\n🧠 Học route tự động giữa on-premises và AWS. 🔁 Tự động chuyển đổi đường đi khi tunnel lỗi (failover). 📈 Tối ưu hóa đường đi, chọn tuyến tối ưu. 🔄 Không cần cập nhật route thủ công – dễ mở rộng. BGP là bắt buộc nếu bạn cần tự động hóa định tuyến và đảm bảo tính linh hoạt khi mạng mở rộng.\n🏗️ Redundancy với Multi-Tunnel VPN AWS cung cấp 2 tunnel IPSec cho mỗi VPN Connection. Khi sử dụng BGP:\nNếu 1 tunnel bị lỗi, BGP tự động chuyển sang tunnel còn lại. Cả hai tunnel có thể hoạt động đồng thời. Mô hình này đảm bảo độ tin cậy và tính sẵn sàng cao, phù hợp với các tổ chức yêu cầu kết nối không gián đoạn (ngân hàng, logistics, SaaS\u0026hellip;). 🧩 Mô hình kiến trúc đề xuất Một VPC trên AWS (10.0.0.0/16) làm mạng cloud. Một thiết bị mô phỏng on-premises router (VyOS hoặc pfSense) có IP tĩnh. Customer Gateway: đại diện thiết bị on-prem. Virtual Private Gateway: gắn với VPC. Site-to-Site VPN với 2 đường hầm hỗ trợ BGP. CloudWatch + CloudTrail để giám sát trạng thái. IAM Role để phân quyền quản lý. VPC Flow Logs để giám sát lưu lượng. 💡 Tình huống thực tế Công ty XYZ đang chuyển một phần hạ tầng ứng dụng lên AWS nhưng vẫn duy trì hệ thống kiểm soát và dữ liệu tại trung tâm dữ liệu on-premises.\nYêu cầu:\nLuồng dữ liệu giữa hai môi trường phải an toàn và ổn định. Hệ thống không được gián đoạn khi một tunnel VPN bị lỗi. Cần cơ chế định tuyến động khi địa chỉ IP trên on-prem thay đổi. Cần giám sát và xử lý lỗi kịp thời. Giải pháp: Site-to-Site VPN + BGP + Monitoring + Multi-Tunnel Redundancy.\n🎓 Những gì bạn sẽ học được Năng lực đạt được Mô tả chi tiết ✅ Thiết lập VPN với nhiều tunnel Tạo Site-to-Site VPN connection redundancy ✅ Cấu hình BGP hai chiều Tự động học và quảng bá route ✅ Failover automation Khi tunnel down, traffic tự chuyển đổi ✅ Giám sát tunnel và định tuyến Với CloudWatch, CloudTrail ✅ Theo dõi lưu lượng mạng Dùng VPC Flow Logs ✅ Bảo vệ VPN connection Bảo mật PSK, phân quyền IAM ✅ Ước lượng và tối ưu hóa chi phí Dựa trên usage patterns ✅ Ghi chú và vận hành hệ thống Chuẩn hóa tài liệu cho team ops 📦 Các công cụ và dịch vụ sử dụng Amazon VPC Virtual Private Gateway (VGW) Customer Gateway (CGW) EC2 Instance (router giả lập VyOS/pfSense) Site-to-Site VPN BGP Routing CloudWatch \u0026amp; CloudTrail IAM Roles \u0026amp; Policies VPC Flow Logs 🛠️ Kiến thức cần có trước khi bắt đầu Nắm cơ bản về AWS Networking: VPC, Subnets, Route Table. Biết sử dụng AWS Console hoặc CLI. Hiểu kiến thức cơ bản về routing IP, CIDR, IPSec. Có kiến thức nền tảng về BGP hoặc static routing. Kinh nghiệm với Linux, VyOS hoặc pfSense là lợi thế. "
},
{
	"uri": "//localhost:1313/vi/6-site-to-site-vpn-lambda-cloudwatch/6-1-lambda-on-sts-vpn/",
	"title": "Tạo Lambda",
	"tags": [],
	"description": "",
	"content": "IAM Role cho Lambda (chi tiết) Phần này hướng dẫn rất chi tiết từng bước để tạo IAM Role dùng cho Lambda phục vụ diagnostic khi VPN tunnel down. Role sẽ có:\nManaged policy AWSLambdaBasicExecutionRole (cho phép ghi CloudWatch Logs), Inline policy tối thiểu cho phép ec2:DescribeVpnConnections, ssm:SendCommand, ssm:GetCommandInvocation, và (tùy chọn) sns:Publish. Quan trọng: ở môi trường production hãy giới hạn Resource trong policy tới ARN cụ thể để tuân theo nguyên tắc least privilege.\nMở IAM Console và bắt đầu tạo Role Đăng nhập AWS Management Console → tìm IAM → vào Roles. Nhấn Create role. Chọn AWS service → Lambda → Next. Gán Managed Policy cho logging Ở trang Attach permissions policies, tìm và tick AWSLambdaBasicExecutionRole. Click Next. Điền tên và tạo role Role name: lambda-vpn-diagnostic-role (hoặc tên bạn thích). (Optional) Thêm tag để quản lý (team, project). Click Create role. Thêm inline policy (permissions tối thiểu) Trong IAM → Roles → mở lambda-vpn-diagnostic-role → tab Permissions → click Add inline policy. Chọn tab JSON và dán policy sau (mẫu; thay Resource bằng ARN cụ thể khi làm production): { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;EC2DescribeAndVPN\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DescribeVpnConnections\u0026#34;, \u0026#34;ec2:DescribeInstances\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;SSMRunCommands\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ssm:SendCommand\u0026#34;, \u0026#34;ssm:GetCommandInvocation\u0026#34;, \u0026#34;ssm:ListCommandInvocations\u0026#34;, \u0026#34;ssm:ListCommands\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:ec2:*:*:instance/*\u0026#34;, \u0026#34;arn:aws:ssm:*:*:document/AWS-RunShellScript\u0026#34;, \u0026#34;arn:aws:ssm:*:*:managed-instance/*\u0026#34; ] }, { \u0026#34;Sid\u0026#34;: \u0026#34;OptionalSNSPublish\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Click Review policy → đặt tên (ví dụ lambda-vpn-diagnostic-inline) → Create policy. Ghi chú: nếu không dùng SNS để forward kết quả, hãy xóa block OptionalSNSPublish.\nKiểm tra Trust Relationship Trong IAM → Roles → chọn lambda-vpn-diagnostic-role → tab Trust relationships. Trust policy phải cho phép lambda.amazonaws.com assume role. Mẫu: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } Nếu khác, click Edit trust relationship và cập nhật. (Tùy chọn) Tạo bằng CLI Nếu bạn muốn script hoá:\n# Tạo role aws iam create-role --role-name lambda-vpn-diagnostic-role --assume-role-policy-document file://trust.json # Attach managed policy aws iam attach-role-policy --role-name lambda-vpn-diagnostic-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # Put inline policy aws iam put-role-policy --role-name lambda-vpn-diagnostic-role --policy-name lambda-vpn-diagnostic-inline --policy-document file://inline-policy.json Tạo Lambda function (vpn-diagnostic-handler) Hướng dẫn từng bước tạo Lambda function, cấu hình biến môi trường, timeout/memory, dán mã, deploy và test — tất cả thực hiện trong AWS Management Console.\nChuẩn bị VPN_ID (ví dụ vpn-0abcd1234) - sẽ dùng trong ec2.describe_vpn_connections. EC2_INSTANCE_ID (ví dụ i-0123456789abcdef0) — EC2 phải là SSM managed instance (SSM Agent + IAM Instance Profile AmazonSSMManagedInstanceCore). ONPREM_PRIVATE_IP (ví dụ 192.168.100.10) — IP nội bộ on‑prem để ping/traceroute. REGION (ví dụ ap-southeast-1). Role IAM: lambda-vpn-diagnostic-role (được tạo ở phần L). Tạo function Mở AWS Console → Lambda → Create function.\nChọn Author from scratch.\nĐiền:\nFunction name: vpn-diagnostic-handler Runtime: Python 3.11 (hoặc 3.9) Permissions: Use an existing role → chọn lambda-vpn-diagnostic-role. Click Create function.\nChú ý: tạo function tại region phù hợp với EC2/VPN để tránh cross-region issues.\nThiết lập Environment variables Trong function → Configuration → Environment variables → Edit → Add environment variables:\nVPN_ID = vpn-xxxxxxxx EC2_INSTANCE_ID = i-0123456789abcdef0 ONPREM_PRIVATE_IP = 192.168.100.10 REGION = ap-southeast-1 FORWARD_SNS_ARN = `` (nếu muốn publish summary tới SNS, đặt ARN) Save.\nBảo mật: không lưu Pre-Shared Key (PSK) vào biến môi trường. Nếu cần sử dụng PSK hoặc webhook secrets, lưu trong AWS Secrets Manager.\nCấu hình Timeout \u0026amp; Memory Vào Configuration → General configuration → Edit:\nTimeout: 120 seconds (tăng nếu muốn chờ lâu hơn) Memory: 256 MB Save.\nDán mã Lambda (Code) Trong Code → Code source, mở file lambda_function.py (editor) và dán đoạn mã sau: import os import time import json import boto3 import logging logger = logging.getLogger() logger.setLevel(logging.INFO) ssm = boto3.client(\u0026#39;ssm\u0026#39;) ec2 = boto3.client(\u0026#39;ec2\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) # Read env VPN_ID = os.environ.get(\u0026#39;VPN_ID\u0026#39;) EC2_INSTANCE_ID = os.environ.get(\u0026#39;EC2_INSTANCE_ID\u0026#39;) ONPREM_PRIVATE_IP = os.environ.get(\u0026#39;ONPREM_PRIVATE_IP\u0026#39;) REGION = os.environ.get(\u0026#39;REGION\u0026#39;) or boto3.session.Session().region_name FORWARD_SNS_ARN = os.environ.get(\u0026#39;FORWARD_SNS_ARN\u0026#39;) # optional def run_ssm_command(instance_id, commands, timeout=60): resp = ssm.send_command( InstanceIds=[instance_id], DocumentName=\u0026#34;AWS-RunShellScript\u0026#34;, Parameters={\u0026#34;commands\u0026#34;: commands}, TimeoutSeconds=timeout ) cmd_id = resp[\u0026#39;Command\u0026#39;][\u0026#39;CommandId\u0026#39;] logger.info(f\u0026#34;SSM command sent: CommandId={cmd_id}\u0026#34;) end_time = time.time() + timeout while time.time() \u0026lt; end_time: try: inv = ssm.get_command_invocation(CommandId=cmd_id, InstanceId=instance_id) status = inv.get(\u0026#39;Status\u0026#39;) logger.info(f\u0026#34;Invocation status: {status}\u0026#34;) if status in (\u0026#39;Success\u0026#39;, \u0026#39;Failed\u0026#39;, \u0026#39;Cancelled\u0026#39;, \u0026#39;TimedOut\u0026#39;): return inv except ssm.exceptions.InvocationDoesNotExist: pass time.sleep(1) raise TimeoutError(\u0026#34;SSM command invocation timed out\u0026#34;) def describe_vpn(vpn_id): resp = ec2.describe_vpn_connections(VpnConnectionIds=[vpn_id]) return resp.get(\u0026#39;VpnConnections\u0026#39;, []) def build_response_summary(event, vpn_info, ssm_result): summary = { \u0026#34;event\u0026#34;: event if isinstance(event, dict) else str(event), \u0026#34;vpn_info\u0026#34;: vpn_info, \u0026#34;ssm_result\u0026#34;: { \u0026#34;Status\u0026#34;: ssm_result.get(\u0026#39;Status\u0026#39;) if isinstance(ssm_result, dict) else ssm_result, \u0026#34;StandardOutputContent\u0026#34;: ssm_result.get(\u0026#39;StandardOutputContent\u0026#39;) if isinstance(ssm_result, dict) else None, \u0026#34;StandardErrorContent\u0026#34;: ssm_result.get(\u0026#39;StandardErrorContent\u0026#39;) if isinstance(ssm_result, dict) else None } } return summary def lambda_handler(event, context): logger.info(\u0026#34;Received event: %s\u0026#34;, json.dumps(event)) try: alarm_name = event.get(\u0026#39;detail\u0026#39;, {}).get(\u0026#39;alarmName\u0026#39;) or event.get(\u0026#39;AlarmName\u0026#39;) except Exception: alarm_name = None logger.info(f\u0026#34;Alarm name: {alarm_name}\u0026#34;) vpn_info = [] try: if VPN_ID: vpn_info = describe_vpn(VPN_ID) else: vpn_info = {\u0026#34;error\u0026#34;: \u0026#34;VPN_ID not set in environment\u0026#34;} except Exception as e: logger.exception(\u0026#34;Error describing VPN: %s\u0026#34;, e) vpn_info = {\u0026#34;error\u0026#34;: str(e)} ssm_result = {} if EC2_INSTANCE_ID and ONPREM_PRIVATE_IP: commands = [ f\u0026#34;echo \u0026#39;==== ping to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;ping -c 10 {ONPREM_PRIVATE_IP} || true\u0026#34;, f\u0026#34;echo \u0026#39;==== traceroute to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;traceroute -n {ONPREM_PRIVATE_IP} || true\u0026#34; ] try: inv = run_ssm_command(EC2_INSTANCE_ID, commands, timeout=120) ssm_result = { \u0026#34;Status\u0026#34;: inv.get(\u0026#39;Status\u0026#39;), \u0026#34;StandardOutputContent\u0026#34;: inv.get(\u0026#39;StandardOutputContent\u0026#39;), \u0026#34;StandardErrorContent\u0026#34;: inv.get(\u0026#39;StandardErrorContent\u0026#39;) } except Exception as e: logger.exception(\u0026#34;SSM command failed: %s\u0026#34;, e) ssm_result = {\u0026#34;error\u0026#34;: str(e)} else: ssm_result = {\u0026#34;error\u0026#34;: \u0026#34;EC2_INSTANCE_ID or ONPREM_PRIVATE_IP not configured\u0026#34;} summary = build_response_summary(alarm_name or event, vpn_info, ssm_result) logger.info(\u0026#34;Diagnostic summary: %s\u0026#34;, json.dumps(summary)) if FORWARD_SNS_ARN: try: sns.publish(TopicArn=FORWARD_SNS_ARN, Message=json.dumps(summary), Subject=f\u0026#34;VPN Diagnostic: {alarm_name}\u0026#34;) except Exception as e: logger.exception(\u0026#34;Failed to publish SNS: %s\u0026#34;, e) return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: summary } Click Deploy (góc phải) để lưu code. Thiết lập quyền resource-based policy cho Lambda (EventBridge invoke) Thông thường EventBridge sẽ tự động thêm quyền invoke. Nếu EventBridge không thể invoke Lambda, thêm quyền thủ công bằng CLI: aws lambda add-permission \\ --function-name vpn-diagnostic-handler \\ --statement-id eventbridge-invoke \\ --action \u0026#34;lambda:InvokeFunction\u0026#34; \\ --principal events.amazonaws.com \\ --source-arn arn:aws:events:\u0026lt;region\u0026gt;:\u0026lt;account-id\u0026gt;:rule/alarm-vpn-tunnel1-to-lambda Test Lambda cơ bản Lambda → chọn function vpn-diagnostic-handler → Test. Tạo test event (ví dụ {} hoặc mẫu CloudWatch Alarm event). Run → kiểm tra Monitoring → View logs in CloudWatch để xem output và SSM invocation details. Troubleshooting nhanh Nếu SSM invocation trả lỗi: kiểm tra EC2 instance role (AmazonSSMManagedInstanceCore), SSM Agent cài và VPC access (internet hoặc VPC endpoint). Nếu ec2.describe_vpn_connections trả lỗi permission: kiểm tra inline policy đã attach. Tạo Lambda Function (Console) Lambda sẽ nhận sự kiện từ EventBridge/CloudWatch Alarm, gọi SSM để chạy ping/traceroute từ EC2 test, và ghi kết quả về CloudWatch Logs (và có thể publish tới SNS nếu cần).\nChuẩn bị EC2 test instance đã cài SSM Agent và có IAM Instance Profile gắn AmazonSSMManagedInstanceCore. Ghi ra: VPN_ID (Ví dụ vpn-xxxxxxxx), EC2_INSTANCE_ID (Ví dụ i-0123456789abcdef0), ONPREM_PRIVATE_IP (ví dụ 192.168.100.10). Tạo function Mở AWS Console → Lambda → Create function → Author from scratch.\nCấu hình:\nFunction name: vpn-diagnostic-handler (hoặc tên bạn chọn) Runtime: Python 3.11 (hoặc 3.9) Permissions: Use an existing role → chọn lambda-vpn-diagnostic-role (role đã tạo ở phần C) Click Create function.\nCấu hình Environment variables Vào function → tab Configuration → Environment variables → Edit → Add environment variables:\nVPN_ID = vpn-xxxxxxxx EC2_INSTANCE_ID = i-0123456789abcdef0 ONPREM_PRIVATE_IP = 192.168.100.10 REGION = ap-southeast-1 (hoặc region của bạn) FORWARD_SNS_ARN = `` (để trống nếu không forward) Save.\nLưu ý: không lưu Pre-shared Key (PSK) vào biến môi trường. Nếu cần lưu secret, dùng AWS Secrets Manager và đọc trong Lambda.\nĐiều chỉnh timeout \u0026amp; memory Vào Configuration → General configuration → Edit\nTimeout: đặt 120 seconds (tùy test, có thể 180s) Memory: 256 MB Save. Dán mã Lambda (full code) Trong tab Code -\u0026gt; Code source, chọn file lambda_function.py (hoặc inline editor) và dán đoạn code sau: import os import time import json import boto3 import logging logger = logging.getLogger() logger.setLevel(logging.INFO) ssm = boto3.client(\u0026#39;ssm\u0026#39;) ec2 = boto3.client(\u0026#39;ec2\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) # Read env VPN_ID = os.environ.get(\u0026#39;VPN_ID\u0026#39;) EC2_INSTANCE_ID = os.environ.get(\u0026#39;EC2_INSTANCE_ID\u0026#39;) ONPREM_PRIVATE_IP = os.environ.get(\u0026#39;ONPREM_PRIVATE_IP\u0026#39;) REGION = os.environ.get(\u0026#39;REGION\u0026#39;) or boto3.session.Session().region_name FORWARD_SNS_ARN = os.environ.get(\u0026#39;FORWARD_SNS_ARN\u0026#39;) # optional def run_ssm_command(instance_id, commands, timeout=60): resp = ssm.send_command( InstanceIds=[instance_id], DocumentName=\u0026#34;AWS-RunShellScript\u0026#34;, Parameters={\u0026#34;commands\u0026#34;: commands}, TimeoutSeconds=timeout ) cmd_id = resp[\u0026#39;Command\u0026#39;][\u0026#39;CommandId\u0026#39;] logger.info(f\u0026#34;SSM command sent: CommandId={cmd_id}\u0026#34;) end_time = time.time() + timeout while time.time() \u0026lt; end_time: try: inv = ssm.get_command_invocation(CommandId=cmd_id, InstanceId=instance_id) status = inv.get(\u0026#39;Status\u0026#39;) logger.info(f\u0026#34;Invocation status: {status}\u0026#34;) if status in (\u0026#39;Success\u0026#39;, \u0026#39;Failed\u0026#39;, \u0026#39;Cancelled\u0026#39;, \u0026#39;TimedOut\u0026#39;): return inv except ssm.exceptions.InvocationDoesNotExist: pass time.sleep(1) raise TimeoutError(\u0026#34;SSM command invocation timed out\u0026#34;) def describe_vpn(vpn_id): resp = ec2.describe_vpn_connections(VpnConnectionIds=[vpn_id]) return resp.get(\u0026#39;VpnConnections\u0026#39;, []) def build_response_summary(event, vpn_info, ssm_result): summary = { \u0026#34;event\u0026#34;: event if isinstance(event, dict) else str(event), \u0026#34;vpn_info\u0026#34;: vpn_info, \u0026#34;ssm_result\u0026#34;: { \u0026#34;Status\u0026#34;: ssm_result.get(\u0026#39;Status\u0026#39;) if isinstance(ssm_result, dict) else ssm_result, \u0026#34;StandardOutputContent\u0026#34;: ssm_result.get(\u0026#39;StandardOutputContent\u0026#39;) if isinstance(ssm_result, dict) else None, \u0026#34;StandardErrorContent\u0026#34;: ssm_result.get(\u0026#39;StandardErrorContent\u0026#39;) if isinstance(ssm_result, dict) else None } } return summary def lambda_handler(event, context): logger.info(\u0026#34;Received event: %s\u0026#34;, json.dumps(event)) try: alarm_name = event.get(\u0026#39;detail\u0026#39;, {}).get(\u0026#39;alarmName\u0026#39;) or event.get(\u0026#39;AlarmName\u0026#39;) except Exception: alarm_name = None logger.info(f\u0026#34;Alarm name: {alarm_name}\u0026#34;) vpn_info = [] try: if VPN_ID: vpn_info = describe_vpn(VPN_ID) else: vpn_info = {\u0026#34;error\u0026#34;: \u0026#34;VPN_ID not set in environment\u0026#34;} except Exception as e: logger.exception(\u0026#34;Error describing VPN: %s\u0026#34;, e) vpn_info = {\u0026#34;error\u0026#34;: str(e)} ssm_result = {} if EC2_INSTANCE_ID and ONPREM_PRIVATE_IP: commands = [ f\u0026#34;echo \u0026#39;==== ping to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;ping -c 10 {ONPREM_PRIVATE_IP} || true\u0026#34;, f\u0026#34;echo \u0026#39;==== traceroute to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;traceroute -n {ONPREM_PRIVATE_IP} || true\u0026#34; ] try: inv = run_ssm_command(EC2_INSTANCE_ID, commands, timeout=120) ssm_result = { \u0026#34;Status\u0026#34;: inv.get(\u0026#39;Status\u0026#39;), \u0026#34;StandardOutputContent\u0026#34;: inv.get(\u0026#39;StandardOutputContent\u0026#39;), \u0026#34;StandardErrorContent\u0026#34;: inv.get(\u0026#39;StandardErrorContent\u0026#39;) } except Exception as e: logger.exception(\u0026#34;SSM command failed: %s\u0026#34;, e) ssm_result = {\u0026#34;error\u0026#34;: str(e)} else: ssm_result = {\u0026#34;error\u0026#34;: \u0026#34;EC2_INSTANCE_ID or ONPREM_PRIVATE_IP not configured\u0026#34;} summary = build_response_summary(alarm_name or event, vpn_info, ssm_result) logger.info(\u0026#34;Diagnostic summary: %s\u0026#34;, json.dumps(summary)) if FORWARD_SNS_ARN: try: sns.publish(TopicArn=FORWARD_SNS_ARN, Message=json.dumps(summary), Subject=f\u0026#34;VPN Diagnostic: {alarm_name}\u0026#34;) except Exception as e: logger.exception(\u0026#34;Failed to publish SNS: %s\u0026#34;, e) return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: summary } Click Deploy (nếu cần). Lưu ý: kiểm tra script chạy được bằng cách test Lambda (xem mục Testing bên dưới). Nếu EC2 không có traceroute, cân nhắc thay bằng tracepath hoặc cài package traceroute.\nTạo EventBridge Rule (bắt CloudWatch Alarm → gọi Lambda) Thay vì dùng SNS, ta dùng EventBridge để bắt sự kiện Alarm state change và invoke Lambda.\nTạo Rule Mở AWS Console → Amazon EventBridge → Rules → Create rule.\nCấu hình:\nName: alarm-vpn-tunnel1-to-lambda Description: Forward CloudWatch alarm vpn-tunnel1-down to lambda diagnostic Rule type: Event pattern → chọn Custom pattern (JSON). Dán event pattern sau (thay vpn-tunnel1-down bằng tên alarm của bạn nếu khác):\n{ \u0026#34;source\u0026#34;: [\u0026#34;aws.cloudwatch\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;CloudWatch Alarm State Change\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;alarmName\u0026#34;: [\u0026#34;vpn-tunnel1-down\u0026#34;], \u0026#34;state\u0026#34;: { \u0026#34;value\u0026#34;: [\u0026#34;ALARM\u0026#34;] } } } Select targets → Target type: Lambda function → chọn vpn-diagnostic-handler. Click Create. Khi bạn chọn Lambda làm target, EventBridge sẽ tự động thêm permission resource-based policy cho Lambda để EventBridge có thể invoke function. Nếu không thấy permission, xem phần troubleshooting.\n"
},
{
	"uri": "//localhost:1313/vi/3-create-site-to-site-vpn/3-2-configure-vpn/3-2-1-create-vpg/",
	"title": "Tạo Virtual Private Gateway",
	"tags": [],
	"description": "",
	"content": "Tạo Virtual Private Gateway (VGW) ℹ️ Tổng quan\nVirtual Private Gateway (VGW) là thành phần quan trọng cho kết nối Site-to-Site VPN Đóng vai trò là điểm cuối VPN phía AWS Cần được gắn (attach) vào VPC đích để thiết lập kết nối Các bước thực hiện Truy cập AWS VPC Console Điều hướng đến Virtual Private Gateways Click Create Virtual Private Gateway Cấu hình Virtual Private Gateway Name tag: Nhập VPN Gateway ASN: Chọn Amazon default ASN Click Create virtual private gateway 💡 Pro Tip\nSử dụng Amazon default ASN là lựa chọn phù hợp cho hầu hết trường hợp Custom ASN chỉ cần thiết khi có yêu cầu đặc biệt về BGP routing Gắn VGW vào VPC Chọn Actions Click Attach to VPC Chọn VPC đích Trong dropdown, chọn VPC ASG Click Attach to VPC ⚠️ Lưu ý quan trọng\nĐảm bảo VGW chuyển sang trạng thái Attached trước khi tiếp tục Quá trình attach có thể mất vài phút để hoàn tất\nXác nhận trạng thái Kiểm tra State hiển thị là Attached VGW đã sẵn sàng cho cấu hình VPN tiếp theo "
},
{
	"uri": "//localhost:1313/vi/2-preparation-step/2-1-create-vpc/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "Tạo Amazon Virtual Private Cloud (VPC) 🔒 Các bước thực hiện\nTruy cập AWS Management Console Tìm kiếm dịch vụ VPC Chọn VPC từ kết quả tìm kiếm Trong giao diện VPC Dashboard Chọn Your VPCs từ menu bên trái Click vào Create VPC Cấu hình thông số VPC Resources: Chọn VPC only Name tag: Nhập ASG IPv4 CIDR: Nhập 10.10.0.0/16 ⚠️ Lưu ý về Tenancy Giữ tùy chọn Tenancy ở chế độ mặc định (Default). Việc chuyển sang Dedicated có thể giới hạn các loại EC2 Instance được hỗ trợ trong VPC.\nXác nhận tạo VPC Click Create VPC để hoàn tất quá trình Kiểm tra trạng thái VPC sau khi tạo 💡 Cấu hình DNS 6. Kích hoạt tính năng DNS cho VPC\nChọn Edit VPC settings Mở tab DNS settings Bật DNS hostnames và DNS resolution Lưu thay đổi "
},
{
	"uri": "//localhost:1313/vi/3-create-site-to-site-vpn/3-1-create-vpc-for-vpn/",
	"title": "Tạo VPC cho VPN",
	"tags": [],
	"description": "",
	"content": "Thiết lập VPC cho Site-to-Site VPN ⚠️ Yêu cầu tiên quyết\nQuyền truy cập vào AWS Console với đủ quyền tạo VPC resources Hiểu biết cơ bản về CIDR và subnet planning Tạo VPC và Subnet Truy cập VPC Dashboard Chọn Your VPCs Click Create VPC Cấu hình VPC mới Resource type: Chọn VPC only Name: Nhập ASG VPN IPv4 CIDR: Nhập 10.11.0.0/16 Click Create VPC Tạo Public Subnet Truy cập Subnets Click Create subnet Chọn VPC ASG VPN Cấu hình Subnet Name: Nhập VPN Public Availability Zone: Chọn ap-southeast-1a IPv4 CIDR: Nhập 10.11.1.0/24 Click Create subnet Cấu hình Internet Connectivity Enable Auto-assign Public IP Chọn subnet VPN Public Click Actions \u0026gt; Edit subnet settings Chọn Enable auto-assign public IPv4 address Click Save Tạo Internet Gateway Truy cập Internet Gateways Click Create internet gateway Name: Nhập Internet Gateway VPN Click Create Attach Internet Gateway vào VPC Chọn IGW vừa tạo Click Actions \u0026gt; Attach to VPC Chọn VPC ASG VPN Click Attach Cấu hình Route Table Tạo Route Table mới Truy cập Route Tables Click Create route table Name: Nhập Route table VPN - Public VPC: Chọn ASG VPN Click Create Thêm Route cho Internet Access Chọn tab Routes Click Edit routes Click Add route Destination: Nhập 0.0.0.0/0 Target: Chọn Internet Gateway VPN Click Save changes Liên kết Subnet Chọn tab Subnet associations Click Edit subnet associations Chọn subnet VPN Public Click Save associations 💡 Pro Tip\nĐảm bảo kiểm tra lại tất cả các cấu hình route và security group Sử dụng tags để quản lý tài nguyên hiệu quả Lưu trữ CIDR ranges trong tài liệu để tham khảo sau này "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Tổng quan",
	"tags": [],
	"description": "",
	"content": "TỔNG QUAN Site-to-Site VPN với BGP và Redundancy là giải pháp kết nối an toàn, linh hoạt và có khả năng chịu lỗi cao giữa hạ tầng AWS và hệ thống on-premises (hoặc giữa hai hạ tầng cloud khác nhau). Giải pháp này tận dụng sức mạnh của IPSec VPN, Border Gateway Protocol (BGP) và cơ chế redundancy để đảm bảo kết nối luôn hoạt động liên tục ngay cả khi một đường truyền gặp sự cố.\nGiải pháp được thiết kế dựa trên các thành phần chính:\nAWS Virtual Private Gateway (VGW) hoặc AWS Transit Gateway (TGW): Là đầu mối kết nối phía AWS, chịu trách nhiệm quản lý các kết nối VPN và định tuyến. Customer Gateway (CGW): Thiết bị hoặc phần mềm ở phía on-premises, đóng vai trò đối tác kết nối. IPSec Tunnels: Hai đường hầm bảo mật cho mỗi kết nối VPN, hoạt động song song nhằm cung cấp khả năng dự phòng. BGP: Giao thức định tuyến động giúp tự động cập nhật bảng định tuyến, giảm thiểu downtime khi xảy ra sự cố. Redundancy \u0026amp; Failover: Cơ chế phân luồng và chuyển hướng lưu lượng tự động khi một tunnel hoặc đường truyền bị lỗi. Lợi ích nổi bật của giải pháp:\n🔒 Bảo mật cao: Sử dụng IPSec để mã hóa dữ liệu, đảm bảo an toàn trong quá trình truyền tải. ⚡ Tự động cập nhật định tuyến: Nhờ BGP, việc thêm, gỡ bỏ hoặc thay đổi mạng đều được cập nhật tự động. 🔄 Dự phòng linh hoạt: Với hai tunnel cho mỗi kết nối và có thể triển khai nhiều kết nối VPN song song, hệ thống luôn duy trì kết nối ổn định. 📈 Khả năng mở rộng: Dễ dàng kết nối thêm site mới hoặc mở rộng dải mạng mà không phải thay đổi thủ công nhiều cấu hình. 💰 Tối ưu chi phí: Tránh phụ thuộc hoàn toàn vào các đường truyền leased-line đắt đỏ, tận dụng hạ tầng internet sẵn có. Kịch bản triển khai điển hình:\nKết nối AWS VPC với trung tâm dữ liệu on-premises phục vụ hệ thống ERP, CRM. Đồng bộ dữ liệu thời gian thực giữa các cơ sở hạ tầng. Hỗ trợ mô hình Hybrid Cloud hoặc Multi-Cloud. Tích hợp giải pháp DR (Disaster Recovery) với khả năng chuyển mạch tự động. Trong workshop này, chúng ta sẽ đi qua toàn bộ quy trình thiết kế, triển khai, kiểm thử và giám sát giải pháp Site-to-Site VPN với BGP và Redundancy, bao gồm:\nThiết kế kiến trúc highly available Cấu hình BGP Routing Triển khai multiple tunnels Thiết lập automatic failover Tích hợp monitoring \u0026amp; troubleshooting Thực hiện cost optimization Kiểm tra security compliance Xây dựng operational runbook \u0026amp; documentation "
},
{
	"uri": "//localhost:1313/vi/2-preparation-step/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng quan về Môi trường AWS VPC ℹ️ Mục tiêu Lab\nXây dựng môi trường VPC hoàn chỉnh từ đầu Triển khai các thành phần mạng cơ bản của AWS Thiết lập cấu trúc mạng an toàn và có khả năng mở rộng ⚠️ Kiến trúc Tổng thể Trong bài thực hành này, chúng ta sẽ xây dựng một mô hình VPC theo sơ đồ bên dưới:\n🔒 Các Thành phần Chính\nVPC - Môi trường mạng ảo riêng biệt Subnet - Phân đoạn mạng cho các tài nguyên Internet Gateway - Cổng kết nối internet Route Table - Bảng định tuyến lưu lượng mạng Các Bước Triển khai 💡 Quy trình Thực hiện\nTạo VPC Tạo Subnet Tạo Internet Gateway Tạo Route Table "
},
{
	"uri": "//localhost:1313/vi/3-create-site-to-site-vpn/3-2-configure-vpn/",
	"title": "Cấu hình kết nối VPN",
	"tags": [],
	"description": "",
	"content": "Cấu hình AWS Site-to-Site VPN ℹ️ Tổng quan\nPhần này hướng dẫn thiết lập kết nối AWS Site-to-Site VPN. Bao gồm cấu hình Virtual Private Gateway (VGW) và Customer Gateway (CGW). Cho phép kết nối bảo mật giữa hai VPC thông qua IPSec tunnels. 🔒 Thành phần chính\nVirtual Private Gateway (VGW): Điểm cuối VPN phía AWS. Customer Gateway (CGW): Đại diện cho thiết bị VPN phía khách hàng. VPN Connection: Kết nối IPSec giữa VGW và CGW. Các bước triển khai 💡 Quy trình cấu hình\nTạo VPG Tạo Customer Gateway Tạo Kết nối VPN "
},
{
	"uri": "//localhost:1313/vi/3-create-site-to-site-vpn/3-2-configure-vpn/3-2-2-create-customer-gateway/",
	"title": "Tạo Customer Gateway",
	"tags": [],
	"description": "",
	"content": "Tạo Customer Gateway Truy cập vào VPC\nChọn Customer Gateways Chọn Create Customer Gateway Trong giao diện Create Customer Gateway\nTại trường Name tag, nhập Customer Gateway Tại trường IP address, nhập địa chỉ Public IP của máy chủ EC2 Customer Gateway Chọn Create Customer Gateway Quá trình tạo Customer Gateway sẽ hoàn tất sau khoảng 5 phút ℹ️ Thông tin quan trọng: Theo mô hình kiến trúc, Customer Gateway sẽ được triển khai trong VPC trên môi trường on-premise. Trong bước này, chúng ta đang khai báo với AWS về việc sử dụng một Customer Gateway với địa chỉ IP public của EC2 instance (Customer Gateway) nằm trong Auto Scaling Group của VPN VPC.\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation-step/2-2-create-subnet/",
	"title": "Tạo Subnet",
	"tags": [],
	"description": "",
	"content": "Tạo Subnet trong Amazon VPC 🔒 Các bước thực hiện\nTruy cập giao diện VPC Chọn Subnets từ menu bên trái Click vào Create subnet Chọn VPC Trong giao diện Create subnet Chọn VPC ASG đã tạo trước đó Cấu hình Subnet đầu tiên Subnet name: Nhập Public Subnet 1 Availability Zone: Chọn ap-southeast-1a IPv4 CIDR: Nhập 10.10.1.0/24 Click Create subnet Xác nhận tạo subnet thành công 💡 Tạo các Subnet bổ sung\nLặp lại quy trình để tạo thêm các subnet sau: Public Subnet 2 CIDR: 10.10.2.0/24 AZ: ap-southeast-1b Private Subnet 1 CIDR: 10.10.3.0/24 AZ: ap-southeast-1a Private Subnet 2 CIDR: 10.10.4.0/24 AZ: ap-southeast-1b ⚠️ Lưu ý về Availability Zone AWS sử dụng hai khái niệm:\nAvailability Zone (AZ): Tên hiển thị (ví dụ: ap-southeast-1a) -** AZ ID**: Định danh thực tế của AZ AWS ánh xạ ngẫu nhiên AZ với AZ ID giữa các tài khoản để đảm bảo phân phối tài nguyên đồng đều. Cấu hình Auto-assign Public IP ℹ️ Mục đích Cho phép tự động cấp phát địa chỉ IP công cộng cho các instance trong public subnet.\nCấu hình** Public Subnet 1** Chọn subnet từ danh sách Click Actions Chọn Edit subnet settings Kích hoạt tính năng Auto-assign IP Bật Enable auto-assign public IPv4 address Click Save Lặp lại cấu hình cho Public Subnet 2 "
},
{
	"uri": "//localhost:1313/vi/6-site-to-site-vpn-lambda-cloudwatch/6-2-testing-troubleshooting/",
	"title": "Testing &amp; Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Testing / Kiểm thử Test qua EventBridge (khuyến nghị):\nEventBridge → Rules → chọn rule alarm-vpn-tunnel1-to-lambda → Test → Create test event → paste sample event JSON (mẫu có trong tài liệu workshop) → Send test event. Kiểm tra Lambda → Monitoring → View logs in CloudWatch. Test invoke trực tiếp Lambda:\nLambda → chọn function → Test → paste {} hoặc sample event → Run. End-to-end (thực tế):\nKích hoạt alarm thật (ví dụ chặn UDP 500/4500 outbound tới AWS_T1_OUT để TunnelState = 0) → khi Alarm chuyển ALARM, EventBridge sẽ invoke Lambda → Lambda gọi SSM → check SSM command output. Troubleshooting quick guide (Hướng dẫn xử lý nhanh) Bảng tóm tắt symptom → nguyên nhân có thể → lệnh/kiểm tra nhanh (console \u0026amp; on‑prem). Sau bảng là hướng dẫn chi tiết từng bước.\nSymptom Possible causes Quick fixes / commands Tunnel DOWN (AWS) PSK mismatch, outside IP blocked, NAT-T blocked (UDP 4500/500) Check AWS Tunnel details; on‑prem: show crypto isakmp sa / show crypto ipsec sa or sudo ipsec statusall BGP not established Wrong inside IP, ASN mismatch, TCP 179 blocked, BGP timers Verify inside IPs; verify ASN; show ip bgp summary on router; check security groups/NACL (though BGP is over inside IPs through VPN) Intermittent packet loss MTU/fragmentation, packet drop on path, IPSec rekey Check IPSec SA counters; reduce MTU; enable DF handling; run continuous ping/iperf Routes not propagated to VPC Route propagation disabled, BGP not advertising VPC → Route Tables → Route propagation enabled for VGW; AWS: aws ec2 describe-route-tables Troubleshooting (thường gặp) EventBridge không invoke Lambda: kiểm tra resource-based policy của Lambda (Permissions → Resource-based policy). Nếu cần, thêm bằng CLI:\naws lambda add-permission \\ --function-name vpn-diagnostic-handler \\ --statement-id eventbridge-invoke \\ --action \u0026#34;lambda:InvokeFunction\u0026#34; \\ --principal events.amazonaws.com \\ --source-arn arn:aws:events:\u0026lt;region\u0026gt;:\u0026lt;account-id\u0026gt;:rule/alarm-vpn-tunnel1-to-lambda SSM không thực thi lệnh: kiểm tra EC2 có SSM Agent \u0026amp; Instance Profile\n"
},
{
	"uri": "//localhost:1313/vi/6-site-to-site-vpn-lambda-cloudwatch/6-3-performance-monitroing-dashboard/",
	"title": "Performance monitoring &amp; Dashboard",
	"tags": [],
	"description": "",
	"content": "Performance monitoring \u0026amp; Dashboard (CloudWatch) Phần này hướng dẫn chi tiết cách cấu hình giám sát hiệu năng và trạng thái Site‑to‑Site VPN bằng Amazon CloudWatch, tạo dashboard trực quan và cấu hình retention cho logs liên quan.\nMetrics cần giám sát (namespace AWS/VPN) Các metric cốt lõi cần theo dõi:\nTunnelState (1 = up, 0 = down)\nDùng để phát hiện tunnel bị down. TunnelDataIn / TunnelDataOut (bytes)\nLưu lượng inbound/outbound qua mỗi tunnel — dùng để phát hiện spike hoặc traffic shift khi failover. TunnelPacketDrop / TunnelPacketLoss (nếu provider cung cấp)\nNếu có, dùng để phát hiện mất gói/quality issues. TunnelLatency (nếu provider cung cấp)\nDùng để giám sát độ trễ giữa hai đầu tunnel. Ghi chú: metric có thể xuất hiện theo dạng per‑tunnel (tách theo tunnel index) — khi chọn metric, hãy lọc theo VpnConnectionId và TunnelIndex để đảm bảo đúng tunnel.\nTạo Dashboard chi tiết (CloudWatch) Hướng dẫn từng bước tạo dashboard vpn-dashboard và thêm widgets cần thiết.\nTạo dashboard Mở AWS Console → CloudWatch → Dashboards → Create dashboard. Đặt tên: vpn-dashboard → Create dashboard. Chọn layout (ví dụ: Grid hoặc Time series) — Grid linh hoạt hơn để thêm nhiều widget. Thêm widget Line graph cho lưu lượng Trong dashboard, click Add widget → chọn Line (Line graph). Trong modal Add metric, chọn Browse → AWS/VPN → By Tunnel (hoặc By VPN Connection tùy giao diện). Chọn metric TunnelDataIn và TunnelDataOut cho cả hai tunnel (từ cùng VPN connection) — bạn có thể thêm nhiều series trong cùng widget. Điều chỉnh: Statistic = Sum hoặc Average (thường dùng Sum cho bytes), Period = 1 minute hoặc 5 minutes tùy nhu cầu. Optionally, bật Y axis (left/right) nếu muốn hiển thị hai metric với scale khác nhau. Click Create widget. Thêm Single value widgets cho TunnelState Click Add widget → chọn Single value. Chọn metric AWS/VPN → TunnelState cho Tunnel 1 (lọc theo VpnConnectionId và TunnelIndex=1). Statistic: Minimum để nếu giá trị có lúc 0 sẽ hiển thị 0. Title: Tunnel 1 State → Create widget. Lặp lại cho Tunnel 2 (TunnelIndex=2) để có 2 widget trạng thái riêng. Thêm cảnh báo trạng thái \u0026amp; annotation Bạn có thể thêm annotations (text) hoặc widget Alarm status (nếu muốn hiển thị trạng thái alarm trên dashboard). Thêm widget Text để viết runbook ngắn (ví dụ các bước xử lý nhanh khi tunnel down). Metric Math (tùy chọn) Để xem tổng lưu lượng qua cả 2 tunnel, khi thêm widget chọn Add math expression và dùng expression như: m1 + m2 (với m1 = TunnelDataOut t1, m2 = TunnelDataOut t2). Đặt tên cho expression (ví dụ TotalDataOut) để dễ theo dõi. Tùy chỉnh thời gian \u0026amp; refresh Ở góc trên dashboard, chọn time range (Last 1 hour / 3 hours / 24 hours) và Refresh interval (Auto / 1 minute / 5 minutes). Lưu \u0026amp; chia sẻ Click Save dashboard. Bạn có thể export link (View in Console) hoặc bật share theo IAM để nhóm vận hành truy cập. CloudWatch Logs retention (đặt retention cho Lambda/SSM logs) Đảm bảo logs không lưu giữ vô hạn để tránh chi phí tăng.\nThiết lập retention cho mỗi Log Group Mở CloudWatch → Logs → Log groups. Tìm log group của Lambda: /aws/lambda/vpn-diagnostic-handler → chọn log group. Click Actions → Edit retention → chọn 90 days (hoặc policy của bạn) → Save. Lặp lại cho log group Systems Manager (SSM) output nếu có (ví dụ /aws/ssm/commands hoặc tên custom bạn dùng). Lưu ý về logging volume Tránh in quá nhiều logs (verbose) trong Lambda khi chạy trong production. Sử dụng LOG_LEVEL để điều chỉnh. Dùng CloudWatch Logs Insights để run queries thay vì xuất toàn bộ logs xuống S3. "
},
{
	"uri": "//localhost:1313/vi/2-preparation-step/2-3-create-internet-gateway/",
	"title": "Tạo Internet GateWay",
	"tags": [],
	"description": "",
	"content": "Tạo Internet Gateway trong Amazon VPC 🔒 Các bước thực hiện\nTruy cập giao diện VPC Chọn Internet Gateways từ menu bên trái Click vào Create internet gateway Cấu hình Internet Gateway Tại Name tag, nhập Internet Gateway Click Create internet gateway Xác nhận tạo Internet Gateway thành công 💡 Kết nối với VPC\nGắn Internet Gateway vào VPC Click Actions Chọn Attach to VPC Chọn VPC ASG từ danh sách (VPC ID sẽ tự động điền) Click Attach internet gateway ⚠️ Xác nhận trạng thái 5. Sau khi gắn thành công:\nState của Internet Gateway sẽ chuyển sang Attached IGW đã sẵn sàng định tuyến lưu lượng internet cho VPC "
},
{
	"uri": "//localhost:1313/vi/3-create-site-to-site-vpn/3-2-configure-vpn/3-2-3-create-vpn-connection/",
	"title": "Tạo kết nối tới VPN",
	"tags": [],
	"description": "",
	"content": "Thiết lập AWS Site-to-Site VPN Connection Tạo VPN Connection Truy cập AWS VPC Console Điều hướng đến Site-to-Site VPN Connections Click Create VPN Connection Cấu hình VPN Connection cơ bản Name tag: Nhập VPN Connection Target Gateway Type: Chọn Virtual Private Gateway Virtual Private Gateway: Chọn VPN Gateway đã tạo Customer Gateway: Chọn Existing Customer Gateway ID: Chọn Customer Gateway đã tạo Cấu hình Routing Routing Options: Chọn Dynamic Phải chọn Dynamic vì làm theo BGP, chọn Static sẽ phù hợp với môi trường ít thay đổi nhiều\nLưu ý:\nGhi nhớ hoặc chụp màn hình hoặc chép các thông tin và lưu vào đâu đó Tại VPN -\u0026gt; VPN Details Khởi tạo VPN Connection Review cấu hình Click Create VPN Connection ⚠️ Lưu ý\nQuá trình khởi tạo VPN có thể mất 5-10 phút Đợi trạng thái chuyển sang Available trước khi tiếp tục\nCấu hình Route Propagation Cấu hình cho Public Route Table\nTruy cập Route Tables trong VPC Console Chọn route table của Public subnet Chọn tab Route Propagation Click **Edit route propagation ** Enable Route Propagation\nChọn Enable cho Virtual Private Gateway Click Save Xác nhận trạng thái Kiểm tra Route Propagation đã chuyển sang Yes Lặp lại quy trình cho Private Route Table Thực hiện tương tự các bước trên Đảm bảo route propagation được enable cho cả public và private subnets 🔒 Security Note\nRoute propagation tự động cập nhật bảng định tuyến khi có thay đổi Đảm bảo chỉ enable cho các route tables cần thiết để tránh rủi ro bảo mật "
},
{
	"uri": "//localhost:1313/vi/3-create-site-to-site-vpn/",
	"title": "Tạo Site-to-Site-VPN",
	"tags": [],
	"description": "",
	"content": "AWS Site-to-Site VPN ℹ️ Tổng quan\nAWS Site-to-Site VPN cho phép tạo kết nối bảo mật giữa on-premises data center hoặc branch office network và Amazon VPC. Hỗ trợ cả hardware VPN appliances và software-based VPN solutions tùy theo nhu cầu. Sử dụng IPSec tunnels để mã hóa dữ liệu khi truyền qua Internet. Yêu cầu cấu hình Virtual Private Gateway (VPG) ở phía AWS và Customer Gateway (CGW) ở phía khách hàng. Thành phần chính 🔒 Virtual Private Gateway (VPG)\nLà VPN endpoint được triển khai trong AWS. Kết nối trực tiếp với VPC thông qua VPC attachments. Quản lý và điều phối các kết nối VPN. Hỗ trợ cả dynamic routing (BGP) và static routing. Mỗi VPC chỉ có thể gắn một VPG tại một thời điểm. 🔒 Customer Gateway (CGW)\nĐại diện cho thiết bị VPN phía khách hàng (on-premises). Có thể là thiết bị phần cứng (Cisco, Juniper, Fortinet, etc.) hoặc phần mềm (StrongSwan, OpenVPN). Yêu cầu một địa chỉ IP public tĩnh duy nhất trong mỗi region. Phải khai báo ASN (Autonomous System Number) nếu dùng BGP. 🔒 Redundancy \u0026amp; BGP\nMỗi kết nối VPN trên AWS tạo hai tunnel IPSec độc lập để đảm bảo tính dự phòng. Sử dụng BGP để trao đổi route động giữa AWS và on-premises. Automatic Failover: Khi một tunnel gặp sự cố, BGP sẽ tự động cập nhật route và chuyển lưu lượng sang tunnel còn lại mà không gián đoạn dịch vụ. Có thể thiết lập tối ưu hóa định tuyến bằng cách cấu hình BGP metrics và AS_PATH prepending để ưu tiên một tunnel làm primary và tunnel còn lại làm backup. 🔒 CloudWatch Alarm \u0026amp; Monitoring\nSử dụng Amazon CloudWatch Metrics để giám sát trạng thái VPN tunnels (TunnelState, TunnelDataIn, TunnelDataOut). Tạo CloudWatch Alarms để cảnh báo khi tunnel down. Kết hợp SNS (Simple Notification Service) để gửi thông báo qua email/SMS. 🔒 Automation with Lambda\nSử dụng AWS Lambda để tự động hóa quy trình failover hoặc xử lý sự cố. Có thể tích hợp với CloudWatch Events để kích hoạt Lambda khi tunnel bị mất kết nối. Tự động điều chỉnh route trong VPC Route Tables hoặc cập nhật on-premises firewall rules khi có thay đổi. Quy trình triển khai trên AWS Management Console Tạo Virtual Private Gateway (VPG) và gắn vào VPC. Tạo Customer Gateway (CGW) với IP public và ASN của thiết bị on-premises. Tạo Site-to-Site VPN Connection, chọn Dynamic (BGP) hoặc Static routing. Tải file cấu hình VPN tương thích với thiết bị (Cisco, Juniper, Fortinet, v.v.). Cấu hình thiết bị VPN on-premises dựa trên file đã tải. Kiểm tra trạng thái tunnel trong AWS Console. Cấu hình CloudWatch Alarm và SNS để giám sát. Thử nghiệm failover bằng cách tạm thời tắt một tunnel và kiểm tra lưu lượng. Xác nhận BGP routes đã được trao đổi đầy đủ giữa hai phía. "
},
{
	"uri": "//localhost:1313/vi/6-site-to-site-vpn-lambda-cloudwatch/6-4-cost-optimization/",
	"title": "Cost optimization",
	"tags": [],
	"description": "",
	"content": "Cost optimization Phần này hướng dẫn cách tối ưu chi phí liên quan tới VPN, data transfer, CloudWatch và EC2 test machines.\nHiểu chi phí VPN VPN hourly: AWS tính phí theo connection-hour cho mỗi Site-to-Site VPN connection (mỗi connection có 2 tunnels).\nVí dụ giả định: 0.05 USD/connection-hour. Nếu duy trì 1 kết nối trong 24 giờ: 24 × 0.05 = 1.2 USD/ngày. Nếu thử nghiệm 5 ngày/tuần, 4 tuần: 5 × 4 × 1.2 = 24 USD/tháng. Tối ưu: trong môi trường lab hay workshop, tắt VPN khi không cần thiết để tiết kiệm ~1 USD/ngày.\nData transfer: Data outbound (Internet) có thể bị tính phí theo GB (ví dụ 0.09 USD/GB).\nVí dụ chuyển 50 GB dữ liệu: 50 × 0.09 = 4.5 USD. Không đề cập giá cụ thể ở đây — kiểm tra Billing / Cost Explorer để biết giá theo region và tài khoản.\nTheo dõi Data Transfer bằng Cost Explorer Vào Billing \u0026amp; Cost Management → Cost Explorer → Launch Cost Explorer. Tạo báo cáo custom: Group by: Service → lọc Amazon VPC / AWS VPN / Data Transfer. Time range: Last 30 days. Add filter: Usage Type chứa DataTransfer-Out. Lưu báo cáo để theo dõi hàng tuần. Tối ưu CloudWatch và Logs Retention: đặt retention hợp lý (ví dụ 30–90 ngày) cho log groups quan trọng. Metric Filters: chỉ tạo các filter thật sự cần thiết — mỗi filter có thể tính phí ingestion. Log verbosity: trong Lambda, dùng INFO hoặc WARN cho production; chỉ bật DEBUG khi cần phân tích. EC2 và chi phí lab Dùng instance nhỏ như t2.micro (~0.0104 USD/giờ) hoặc t3.small (~0.0208 USD/giờ) cho VM giả lập router. Ví dụ: t2.micro chạy 24 h = 24 × 0.0104 ≈ 0.25 USD/ngày. Trong production, cần tính network throughput — chọn instance có ENA/high throughput. Tắt (stop) hoặc terminate EC2 test khi không sử dụng. Budgets \u0026amp; Alerts AWS Budgets → Create budget: Loại budget: Cost budget hoặc Usage budget (Data Transfer GB). Ví dụ: đặt threshold ở 80% và 100% → gửi cảnh báo qua email/SNS. Tạo Cost Anomaly Detection để cảnh báo nếu chi phí phát sinh bất thường. Tagging \u0026amp; Chargeback Tag rõ các resource (VPN, EC2, VPC) theo dự án hoặc team — giúp phân tích chi phí đúng nhóm. Sử dụng Tag Policy để đảm bảo tất cả resource mới đều được gắn tag bắt buộc (như Project, Owner, Environment). Bảng minh họa chi phí (giả định) Resource Usage Cost unit Estimated cost VPN connection 24 h × 1 conn 0.05 USD/connection-hour 1.2 USD/day EC2 (t2.micro) 24 h × 30 days ~0.0104 USD/hour ~7.5 USD/month Data transfer 50 GB outbound 0.09 USD/GB 4.5 USD CloudWatch logs retention reduce to 30 days lower log volume → lower cost savings tùy volume Metric filters limit filters ingestion cost savings ~0.03-0.1 USD/filter/day Total (lab scenario) VPN + EC2 + Data ~13.2 USD/month Lưu ý: Đây là bảng ví dụ giả định để hình dung mức chi phí tiềm năng — bạn nên thay bằng số liệu thực tế từ Cost Explorer và Billing Dashboard của tài khoản bạn.\n"
},
{
	"uri": "//localhost:1313/vi/4-redundancy-testing-failover/",
	"title": "Redundancy Testing &amp; Failover",
	"tags": [],
	"description": "",
	"content": "🎯 Mục tiêu Kiểm tra khả năng dự phòng (redundancy) và tự động chuyển mạch (automatic failover) của kiến trúc Site-to-Site VPN sử dụng BGP.\nĐảm bảo rằng khi một tunnel gặp sự cố, lưu lượng sẽ tự động được định tuyến qua tunnel còn lại mà không làm gián đoạn dịch vụ.\n📚 Giới thiệu lý thuyết Trong cấu hình Site-to-Site VPN với BGP, AWS cung cấp 2 IPsec tunnels để tăng tính sẵn sàng.\nBGP sẽ tự động phát hiện khi một tunnel mất kết nối và rút route BGP tương ứng khỏi bảng định tuyến.\nLưu lượng sẽ được chuyển sang tunnel còn hoạt động.\nKiểm tra redundancy giúp:\nXác nhận BGP failover hoạt động đúng. Đảm bảo các route động (dynamic routes) được cập nhật kịp thời. Xác minh thời gian downtime thực tế khi sự cố xảy ra. 🛠 Các bước thực hiện trên AWS Management Console Bước 1 — Xác minh trạng thái ban đầu Mở AWS Management Console → vào VPC. Chọn Site-to-Site VPN Connections. Chọn VPN connection của bạn. Chuyển sang tab Tunnel Details. Xác nhận cả Tunnel 1 và Tunnel 2 đang ở trạng thái: Status: UP BGP Status: UP Bước 2 — Kiểm tra bảng định tuyến (Routing Table) Trong VPC, vào Route Tables. Chọn bảng định tuyến gắn với VPC Subnet đang thử nghiệm. Xem tab Routes. Xác nhận các route đi đến mạng on-premises đang có Target là: vgw-xxxxxxxx hoặc tgw-xxxxxxxx (tùy kiến trúc) Ghi chú ASN, prefix, và next hop từ BGP routes. Bước 3 — Mô phỏng sự cố trên Tunnel 1 Thao tác này thực hiện ở phía on-premises hoặc tạm thời thay đổi cấu hình để ngắt Tunnel 1.\nCách phổ biến:\nTrên thiết bị on-prem: shutdown interface hoặc IPsec policy của Tunnel 1. Nếu không can thiệp được on-prem: sử dụng AWS CLI/Console để disable Tunnel 1 bằng cách chỉnh lại Pre-shared Key sai tạm thời (chỉ để test, sau đó revert). Bước 4 — Quan sát failover Trong tab Tunnel Details, xem trạng thái của Tunnel 1 chuyển từ UP → DOWN. Kiểm tra Tunnel 2 vẫn UP. Trong Route Tables, refresh và xác nhận: Route BGP tương ứng Tunnel 1 đã biến mất. Lưu lượng đang đi qua Tunnel 2. Thực hiện ping/traceroute từ EC2 trong VPC tới server on-prem để xác nhận kết nối không bị gián đoạn. Bước 5 — Khôi phục Tunnel 1 Khôi phục cấu hình chính xác cho Tunnel 1 trên thiết bị on-prem. Quan sát Tunnel 1 trở lại trạng thái UP và BGP Established. Xác nhận lại rằng BGP đã quảng bá route trở lại và có 2 đường active. Bước 6 — Thực hiện tương tự cho Tunnel 2 Lặp lại quy trình với Tunnel 2 để đảm bảo failover hai chiều hoạt động đúng. 📈 Xác minh thời gian failover Sử dụng CloudWatch Metrics cho VPN connection: Vào CloudWatch → Metrics → VPN. Theo dõi metric TunnelState, BGPStatus, TunnelDataIn/Out. Ghi nhận thời gian từ lúc tunnel down đến khi lưu lượng đi qua tunnel còn lại. 💰 Lưu ý về chi phí Việc duy trì cả 2 tunnels ở trạng thái UP không phát sinh thêm chi phí VPN cố định, nhưng lưu lượng qua tunnel vẫn tính phí Data Transfer. Nếu testing nhiều, có thể phát sinh chi phí CloudWatch Logs/Alarms. 🔒 Lưu ý bảo mật Sau khi testing bằng cách đổi Pre-shared Key hoặc tắt tunnel, phải khôi phục lại đúng thông số ban đầu. Chỉ thực hiện test trong khung giờ bảo trì hoặc khi có sự đồng thuận từ team vận hành. ✅ Kết quả mong đợi:\nKhi một tunnel bị down, lưu lượng sẽ tự động chuyển sang tunnel còn lại. Thời gian downtime thực tế chỉ bằng thời gian BGP detect + route propagation (thường 20–30 giây). "
},
{
	"uri": "//localhost:1313/vi/2-preparation-step/2-4-create-route-table/",
	"title": "Tạo Route Table",
	"tags": [],
	"description": "",
	"content": "TẠO ROUTE TABLE Tạo Route Table trong Amazon VPC 🔒 Các bước thực hiện\nTruy cập giao diện VPC Chọn Route Tables từ menu bên trái Click vào Create route table Cấu hình Route Table Name: Nhập Route table-Public VPC: Chọn VPC ASG (VPC ID sẽ tự động điền) Click Create route table Xác nhận tạo Route Table thành công 💡 Cấu hình định tuyến\nThêm route cho Internet Gateway Click Actions Chọn Edit routes Cấu hình route mới Click Add route Destination: Nhập 0.0.0.0/0 (đại diện cho internet) Target: Chọn Internet Gateway và chọn IGW đã tạo Click Save changes ⚠️ Liên kết với Subnet\nThiết lập subnet associations Chọn tab Subnet associations Click Edit subnet associations Chọn các public subnet Mở rộng cột Subnet ID để xem chi tiết Chọn cả 2 public subnet đã tạo Click Save associations Xác nhận cấu hình subnet associations thành công "
},
{
	"uri": "//localhost:1313/vi/6-site-to-site-vpn-lambda-cloudwatch/6-5-checkin-aws-console/",
	"title": "Kiểm tra ngay trên AWS Management Console",
	"tags": [],
	"description": "",
	"content": "Kiểm tra trạng thái Tunnel \u0026amp; BGP VPC Console → Site-to-Site VPN Connections → chọn VPN connection.\nMở tab Tunnel Details:\nKiểm tra Status (UP/DOWN) cho Tunnel 1 \u0026amp; Tunnel 2. Kiểm tra BGP Status (Established / Idle). Sao chép Outside IPs và Inside IPs để so sánh với config on‑prem. Kiểm tra CloudWatch metrics CloudWatch → Metrics → All metrics → AWS/VPN → By Tunnel. Xem metric TunnelState để xác định thời điểm down. Xem TunnelDataIn/Out để phát hiện spike hoặc chuyển hướng lưu lượng. Kiểm tra Route propagation VPC → Route Tables → chọn route table của subnet cần reach on‑prem. Tab Route propagation → đảm bảo VGW được bật. Tab Routes → xác nhận route cho on‑prem CIDR trỏ tới vgw-xxxx. Kiểm tra trên thiết bị On‑Premises (một vài lệnh tham khảo) Các lệnh bên dưới mang tính tham khảo; tuỳ vendor (Cisco/Juniper/VyOS/pfSense) cú pháp khác nhau.\nKiểm tra ISAKMP / IKE SA Cisco IOS: show crypto isakmp sa show crypto ipsec sa VyOS / strongSwan: sudo ipsec statusall sudo swanctl --list-sas # nếu dùng swanctl Kiểm tra BGP Cisco: show ip bgp summary show ip bgp neighbors VyOS: show ip bgp summary Kiểm tra firewall / NAT Kiểm tra firewall rule có cho phép UDP 500/4500, và không NAT outside IP (hoặc NAT đúng) Dùng tcpdump/wireshark để bắt gói trên interface public: sudo tcpdump -n -i eth0 port 500 or port 4500 Kiểm tra MTU / Fragmentation Trên on‑prem, thử ping với DF flag và giảm MTU: ping -M do -s 1400 \u0026lt;ONPREM_PEER_IP\u0026gt; Nếu ping thành công với size nhỏ nhưng thất bại với size lớn, cân nhắc giảm MTU hoặc enable MSS clamping trên firewall. ⚠️ Lưu ý cuối cùng\nTrong mọi test, hãy thực hiện trong maintenance window hoặc thông báo tới teams liên quan. Không thay đổi cả hai tunnel cùng lúc khi test failover. Lưu secrets (PSK, webhook) trong AWS Secrets Manager thay vì đặt trực tiếp trong Lambda env vars. "
},
{
	"uri": "//localhost:1313/vi/5-alarm-tunnelstate-cloudwatch/",
	"title": "Tạo Alarm giám sát TunnelState trong AWS CloudWatch",
	"tags": [],
	"description": "",
	"content": "Tạo Alarm giám sát TunnelState trong AWS CloudWatch Mục tiêu của bước này là cấu hình giám sát trạng thái của từng VPN Tunnel bằng Amazon CloudWatch. Khi một tunnel gặp sự cố (TunnelState = 0), hệ thống sẽ tự động gửi cảnh báo để kỹ thuật viên có thể thực hiện failover hoặc khắc phục ngay.\nCác bước thực hiện trên AWS Management Console Truy cập CloudWatch Vào dịch vụ CloudWatch trên AWS Management Console. Trong menu bên trái, chọn Metrics → All metrics. Chọn metric TunnelState\nChọn namespace: AWS/VPN. Chọn chế độ lọc By Tunnel. Tìm metric TunnelState cho tunnel bạn muốn giám sát (ví dụ Tunnel 1). Tick chọn metric này. Tạo alarm\nNhấn Actions (trên cùng bên phải) → Create alarm. Cấu hình điều kiện alarm Metric name: TunnelState Statistic: Minimum (đảm bảo nếu trong chu kỳ có thời điểm TunnelState = 0 thì vẫn kích hoạt alarm). Period: 1 minute Threshold type: Static Whenever TunnelState is: Chọn Lower/Equal → nhập giá trị 0 Cấu hình hành động (Action) Alarm state trigger: In alarm Send notification to: Chọn SNS topic hiện có hoặc tạo mới. Nếu tạo mới: Chọn Create new topic Đặt tên topic (ví dụ: vpn-alerts) Nhập địa chỉ email nhận thông báo AWS sẽ gửi email xác nhận → vào email và click xác nhận để kích hoạt. Đặt tên và tạo alarm Alarm name: ví dụ VPN-Tunnel1-Down Description: “Cảnh báo khi VPN Tunnel 1 mất kết nối (TunnelState=0)” Nhấn Create alarm để hoàn tất. Lặp lại cho Tunnel 2 Quay lại All metrics → AWS/VPN → By Tunnel và tìm metric TunnelState của Tunnel 2. Tạo alarm tương tự để đảm bảo cả 2 tunnel đều được giám sát. Kết quả mong đợi Khi một tunnel bị mất kết nối, giá trị TunnelState sẽ chuyển sang 0. CloudWatch Alarm sẽ kích hoạt và gửi email cảnh báo đến nhóm kỹ thuật. Nhóm kỹ thuật có thể theo dõi quá trình failover sang tunnel dự phòng và thực hiện các biện pháp khắc phục. "
},
{
	"uri": "//localhost:1313/vi/6-site-to-site-vpn-lambda-cloudwatch/",
	"title": "Site-to-site VPN với Lambda giám sát hoạt động CloudWatch",
	"tags": [],
	"description": "",
	"content": "Tổng quan các bước (Overview) Phần này giúp bạn nắm nhanh luồng công việc và các bước chính trong workshop — đọc phần này trước khi thực hiện các bước chi tiết phía dưới.\nMục tiêu: triển khai Site‑to‑Site VPN với BGP và redundancy, thiết lập giám sát, tự động hoá failover bằng Lambda/EventBridge, tối ưu chi phí và cung cấp runbook xử lý sự cố.\nTóm tắt các bước chính (thứ tự khuyến nghị):\nChuẩn bị \u0026amp; thông tin đầu vào — Xác định VPC, on‑prem CIDR, public IP của router, ASN, EC2 test instance (SSM enabled). Tạo và cấu hình VPN (trên VPC Console) — Tạo VGW, Customer Gateway, và VPN Connection (dynamic BGP, 2 tunnels). (Xem các phần chi tiết trước đó trong tài liệu.) Xác minh BGP \u0026amp; redundancy — Đảm bảo cả 2 tunnel UP và BGP Established; thử mô phỏng failover để kiểm tra route propagation. Thiết lập giám sát — Tạo CloudWatch metrics \u0026amp; Alarms cho TunnelState, TunnelDataIn/Out; cấu hình dashboard vpn-dashboard để trực quan hoá. Tự động hoá xử lý sự cố — Tạo IAM Role cho Lambda (phần L), triển khai Lambda diagnostic (phần M) và EventBridge rule (phần E/N) để gọi Lambda khi Alarm ALARM. Test end‑to‑end — Mô phỏng tunnel down, quan sát CloudWatch Alarm → EventBridge → Lambda → SSM invocation và kết quả ping/traceroute. Tối ưu chi phí \u0026amp; logging — Thiết lập retention cho CloudWatch Logs, theo dõi Data Transfer bằng Cost Explorer, dùng Budgets/Alerts. Chuẩn bị runbook \u0026amp; troubleshooting — Sử dụng bảng quick guide (phần 15) để xử lý sự cố nhanh. Dọn dẹp tài nguyên — Sau khi hoàn thành lab, thực hiện các bước xóa resource (Lambda, EventBridge rule, VPN, VGW, CGW, VPC nếu cần) để tránh chi phí phát sinh. Lưu ý an toàn \u0026amp; vận hành:\nLuôn thực hiện test trong maintenance window và thông báo với đội vận hành. Không thay đổi cả hai tunnel cùng lúc khi kiểm thử failover. Giữ bí mật (PSK, webhooks) trong Secrets Manager — không lưu vào biến môi trường plaintext. "
},
{
	"uri": "//localhost:1313/vi/7-cleanup-resource/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Xóa VPC Endpoints Truy cập vào giao diện Endpoints trong VPC Console Chọn Action Chọn Delete VPC endpoints Nhập “delete” để xác nhận Xóa các tài nguyên VPN ℹ️ Thông tin: Các tài nguyên VPN cần được xóa theo thứ tự phù hợp để tránh lỗi phụ thuộc.\nXóa VPN Site-to-Site connection Xóa Virtual Private Gateway Trước tiên, detach Virtual Private Gateway khỏi VPC (nếu đang attached) Sau đó xóa Virtual Private Gateway Xóa Customer Gateway Xóa VPC Xóa VPC ASG VPN Xóa VPC ASG Xoá Alarm trong Metrics của CloudWatch Chọn All alarms bên trái tại mục Alarms, chọn mục Alarm cần xóa rồi chọn Action, chọn Delete Xóa EventBridge Rule Mở AWS Management Console. Tìm và chọn dịch vụ Amazon EventBridge. Trong menu bên trái, chọn Rules. Trong danh sách rules, tìm Rule đã tạo trong workshop (ví dụ: Alarm-to-Lambda-Rule). Tick chọn vào checkbox của rule đó. Ở góc trên bên phải, chọn Actions → Delete. Hộp thoại xác nhận sẽ xuất hiện, nhập Delete (nếu yêu cầu) và bấm Delete để xác nhận xóa rule. Xóa AWS Lambda Function Từ AWS Management Console, tìm và mở dịch vụ Lambda. Trong danh sách functions, tìm function đã tạo (ví dụ: vpn-diagnostic-handler). Click vào tên function để mở chi tiết. Ở góc trên bên phải, chọn Actions → Delete function. Hộp thoại xác nhận xuất hiện, nhập delete (nếu được yêu cầu) và bấm Delete để xóa function. Xóa IAM Role \u0026amp; Policy Từ AWS Management Console, tìm và chọn dịch vụ IAM. Trong menu bên trái, chọn Roles. Tìm IAM Role đã tạo cho Lambda (ví dụ: lambda-vpn-diagnostic-role). Click vào tên role để mở chi tiết. Ở góc trên bên phải, chọn Delete role. Hộp thoại xác nhận xuất hiện, bấm Yes, Delete. Nếu role này gắn với custom policy (tự tạo trong workshop): Trong menu bên trái của IAM, chọn Policies. Tìm policy đã tạo (ví dụ: lambda-vpn-diagnostic-policy). Tick chọn policy → Actions → Delete. Xác nhận xóa policy. Kiểm tra tài nguyên khác (nếu có) Nếu trong workshop bạn có tạo thêm CloudWatch Alarms, có thể xóa chúng: Mở Amazon CloudWatch. Chọn Alarms → tìm alarm đã tạo → chọn Actions → Delete. Kiểm tra lại toàn bộ các dịch vụ AWS đã dùng trong workshop để đảm bảo không còn tài nguyên hoạt động (VPC, VPN, Gateway, EC2, S3, \u0026hellip; nếu có). 🔒 Security Note: Khi xóa VPC, tất cả các tài nguyên liên quan như subnets, route tables, network ACLs, và security groups cũng sẽ bị xóa. Tuy nhiên, các tài nguyên như NAT Gateways, VPC Endpoints, và VPN Connections cần được xóa riêng trước khi xóa VPC.\nLƯU Ý: Hãy kiểm tra tất cả các dịch vụ lại 1 lần nữa để chắc chắn rằng, KHÔNG còn một dịch vụ nào đang chạy ngầm hoặc chưa xóa để không bị tính phí lâu dài.\nKiểm tra các khu vực của dịch vụ AWS để chắn chắc rằng bạn KHÔNG bị bỏ sót dịch vụ khi sử dụng tại khu vực nào khác.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]