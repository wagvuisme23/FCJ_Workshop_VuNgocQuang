[
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/6-site-to-site-vpn-lambda-cloudwatch/6-1-lambda-on-sts-vpn/",
	"title": "Create Lambda",
	"tags": [],
	"description": "",
	"content": "IAM Role for Lambda (Detailed) This section provides very detailed step-by-step guidance to create an IAM Role for Lambda to perform diagnostics when a VPN tunnel is down. The role will have:\nManaged policy AWSLambdaBasicExecutionRole (allows writing to CloudWatch Logs), Minimal inline policy allowing ec2:DescribeVpnConnections, ssm:SendCommand, ssm:GetCommandInvocation, and (optional) sns:Publish. Important: In a production environment, restrict the Resource in the policy to specific ARNs to follow the least privilege principle.\nOpen IAM Console and start creating the Role Log in to AWS Management Console → search for IAM → go to Roles. Click Create role. Select AWS service → Lambda → Next. Attach Managed Policy for logging On the Attach permissions policies page, search for and tick AWSLambdaBasicExecutionRole. Click Next. Enter name and create the role Role name: lambda-vpn-diagnostic-role (or any name you prefer). (Optional) Add tags for management (team, project). Click Create role. Add inline policy (minimal permissions) In IAM → Roles → open lambda-vpn-diagnostic-role → Permissions tab → click Add inline policy. Select the JSON tab and paste the following policy (sample; replace Resource with specific ARNs for production): { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;EC2DescribeAndVPN\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DescribeVpnConnections\u0026#34;, \u0026#34;ec2:DescribeInstances\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;SSMRunCommands\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ssm:SendCommand\u0026#34;, \u0026#34;ssm:GetCommandInvocation\u0026#34;, \u0026#34;ssm:ListCommandInvocations\u0026#34;, \u0026#34;ssm:ListCommands\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:ec2:*:*:instance/*\u0026#34;, \u0026#34;arn:aws:ssm:*:*:document/AWS-RunShellScript\u0026#34;, \u0026#34;arn:aws:ssm:*:*:managed-instance/*\u0026#34; ] }, { \u0026#34;Sid\u0026#34;: \u0026#34;OptionalSNSPublish\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Click Review policy → name it (e.g., lambda-vpn-diagnostic-inline) → Create policy. Note: If you are not using SNS to forward results, remove the OptionalSNSPublish block.\nCheck Trust Relationship In IAM → Roles → select lambda-vpn-diagnostic-role → Trust relationships tab. The trust policy must allow lambda.amazonaws.com to assume the role. Example: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } If it’s different, click Edit trust relationship and update. (Optional) Create via CLI If you prefer scripting:\n# Tạo role aws iam create-role --role-name lambda-vpn-diagnostic-role --assume-role-policy-document file://trust.json # Attach managed policy aws iam attach-role-policy --role-name lambda-vpn-diagnostic-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # Put inline policy aws iam put-role-policy --role-name lambda-vpn-diagnostic-role --policy-name lambda-vpn-diagnostic-inline --policy-document file://inline-policy.json Create Lambda function (vpn-diagnostic-handler) Step-by-step guidance to create a Lambda function, configure environment variables, timeout/memory, paste code, deploy, and test — all within the AWS Management Console.\nPreparation VPN_ID (e.g., vpn-0abcd1234) — will be used in ec2.describe_vpn_connections. EC2_INSTANCE_ID (e.g., i-0123456789abcdef0) — EC2 must be an SSM managed instance (SSM Agent + IAM Instance Profile AmazonSSMManagedInstanceCore). ONPREM_PRIVATE_IP (e.g., 192.168.100.10) — On-premises internal IP to ping/traceroute. REGION (e.g., ap-southeast-1). IAM Role: lambda-vpn-diagnostic-role (created in section L). Create the function Open AWS Console → Lambda → Create function.\nChoose Author from scratch.\nEnter:\nFunction name: vpn-diagnostic-handler Runtime: Python 3.11 (or 3.9) Permissions: Use an existing role → choose lambda-vpn-diagnostic-role. Click Create function.\nNote: Create the function in the same region as your EC2/VPN to avoid cross-region issues.\nSet Environment variables In the function → Configuration → Environment variables → Edit → Add environment variables:\nVPN_ID = vpn-xxxxxxxx EC2_INSTANCE_ID = i-0123456789abcdef0 ONPREM_PRIVATE_IP = 192.168.100.10 REGION = ap-southeast-1 FORWARD_SNS_ARN = `` (if you want to publish a summary to SNS, set ARN) Save.\nSecurity: Do not store the Pre-Shared Key (PSK) in environment variables. If PSK or webhook secrets are needed, store them in AWS Secrets Manager.\nConfigure Timeout \u0026amp; Memory Go to Configuration → General configuration → Edit:\nTimeout: 120 seconds (increase if you want longer waits) Memory: 256 MB Save.\nPaste Lambda code In Code → Code source, open lambda_function.py (editor) and paste the following code: import os import time import json import boto3 import logging logger = logging.getLogger() logger.setLevel(logging.INFO) ssm = boto3.client(\u0026#39;ssm\u0026#39;) ec2 = boto3.client(\u0026#39;ec2\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) # Read env VPN_ID = os.environ.get(\u0026#39;VPN_ID\u0026#39;) EC2_INSTANCE_ID = os.environ.get(\u0026#39;EC2_INSTANCE_ID\u0026#39;) ONPREM_PRIVATE_IP = os.environ.get(\u0026#39;ONPREM_PRIVATE_IP\u0026#39;) REGION = os.environ.get(\u0026#39;REGION\u0026#39;) or boto3.session.Session().region_name FORWARD_SNS_ARN = os.environ.get(\u0026#39;FORWARD_SNS_ARN\u0026#39;) # optional def run_ssm_command(instance_id, commands, timeout=60): resp = ssm.send_command( InstanceIds=[instance_id], DocumentName=\u0026#34;AWS-RunShellScript\u0026#34;, Parameters={\u0026#34;commands\u0026#34;: commands}, TimeoutSeconds=timeout ) cmd_id = resp[\u0026#39;Command\u0026#39;][\u0026#39;CommandId\u0026#39;] logger.info(f\u0026#34;SSM command sent: CommandId={cmd_id}\u0026#34;) end_time = time.time() + timeout while time.time() \u0026lt; end_time: try: inv = ssm.get_command_invocation(CommandId=cmd_id, InstanceId=instance_id) status = inv.get(\u0026#39;Status\u0026#39;) logger.info(f\u0026#34;Invocation status: {status}\u0026#34;) if status in (\u0026#39;Success\u0026#39;, \u0026#39;Failed\u0026#39;, \u0026#39;Cancelled\u0026#39;, \u0026#39;TimedOut\u0026#39;): return inv except ssm.exceptions.InvocationDoesNotExist: pass time.sleep(1) raise TimeoutError(\u0026#34;SSM command invocation timed out\u0026#34;) def describe_vpn(vpn_id): resp = ec2.describe_vpn_connections(VpnConnectionIds=[vpn_id]) return resp.get(\u0026#39;VpnConnections\u0026#39;, []) def build_response_summary(event, vpn_info, ssm_result): summary = { \u0026#34;event\u0026#34;: event if isinstance(event, dict) else str(event), \u0026#34;vpn_info\u0026#34;: vpn_info, \u0026#34;ssm_result\u0026#34;: { \u0026#34;Status\u0026#34;: ssm_result.get(\u0026#39;Status\u0026#39;) if isinstance(ssm_result, dict) else ssm_result, \u0026#34;StandardOutputContent\u0026#34;: ssm_result.get(\u0026#39;StandardOutputContent\u0026#39;) if isinstance(ssm_result, dict) else None, \u0026#34;StandardErrorContent\u0026#34;: ssm_result.get(\u0026#39;StandardErrorContent\u0026#39;) if isinstance(ssm_result, dict) else None } } return summary def lambda_handler(event, context): logger.info(\u0026#34;Received event: %s\u0026#34;, json.dumps(event)) try: alarm_name = event.get(\u0026#39;detail\u0026#39;, {}).get(\u0026#39;alarmName\u0026#39;) or event.get(\u0026#39;AlarmName\u0026#39;) except Exception: alarm_name = None logger.info(f\u0026#34;Alarm name: {alarm_name}\u0026#34;) vpn_info = [] try: if VPN_ID: vpn_info = describe_vpn(VPN_ID) else: vpn_info = {\u0026#34;error\u0026#34;: \u0026#34;VPN_ID not set in environment\u0026#34;} except Exception as e: logger.exception(\u0026#34;Error describing VPN: %s\u0026#34;, e) vpn_info = {\u0026#34;error\u0026#34;: str(e)} ssm_result = {} if EC2_INSTANCE_ID and ONPREM_PRIVATE_IP: commands = [ f\u0026#34;echo \u0026#39;==== ping to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;ping -c 10 {ONPREM_PRIVATE_IP} || true\u0026#34;, f\u0026#34;echo \u0026#39;==== traceroute to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;traceroute -n {ONPREM_PRIVATE_IP} || true\u0026#34; ] try: inv = run_ssm_command(EC2_INSTANCE_ID, commands, timeout=120) ssm_result = { \u0026#34;Status\u0026#34;: inv.get(\u0026#39;Status\u0026#39;), \u0026#34;StandardOutputContent\u0026#34;: inv.get(\u0026#39;StandardOutputContent\u0026#39;), \u0026#34;StandardErrorContent\u0026#34;: inv.get(\u0026#39;StandardErrorContent\u0026#39;) } except Exception as e: logger.exception(\u0026#34;SSM command failed: %s\u0026#34;, e) ssm_result = {\u0026#34;error\u0026#34;: str(e)} else: ssm_result = {\u0026#34;error\u0026#34;: \u0026#34;EC2_INSTANCE_ID or ONPREM_PRIVATE_IP not configured\u0026#34;} summary = build_response_summary(alarm_name or event, vpn_info, ssm_result) logger.info(\u0026#34;Diagnostic summary: %s\u0026#34;, json.dumps(summary)) if FORWARD_SNS_ARN: try: sns.publish(TopicArn=FORWARD_SNS_ARN, Message=json.dumps(summary), Subject=f\u0026#34;VPN Diagnostic: {alarm_name}\u0026#34;) except Exception as e: logger.exception(\u0026#34;Failed to publish SNS: %s\u0026#34;, e) return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: summary } Click Deploy (top right) to save the code. Set resource-based policy for Lambda (EventBridge invoke) Normally, EventBridge will automatically add the invoke permission. If EventBridge cannot invoke the Lambda, manually add permission via CLI: aws lambda add-permission \\ --function-name vpn-diagnostic-handler \\ --statement-id eventbridge-invoke \\ --action \u0026#34;lambda:InvokeFunction\u0026#34; \\ --principal events.amazonaws.com \\ --source-arn arn:aws:events:\u0026lt;region\u0026gt;:\u0026lt;account-id\u0026gt;:rule/alarm-vpn-tunnel1-to-lambda Basic Lambda test In Lambda → select vpn-diagnostic-handler → Test. Create a test event (e.g., {} or a sample CloudWatch Alarm event). Run → check Monitoring → View logs in CloudWatch to view output and SSM invocation details. Quick Troubleshooting If SSM invocation returns an error: Check EC2 instance role (AmazonSSMManagedInstanceCore), SSM Agent installation, and VPC access (Internet or VPC endpoint). If ec2.describe_vpn_connections returns a permission error: Check if the inline policy is attached. Create Lambda Function (Console) Lambda will receive events from EventBridge/CloudWatch Alarm, call SSM to run ping/traceroute from the test EC2, and log the results to CloudWatch Logs (and optionally publish to SNS if needed).\nPreparation Test EC2 instance with SSM Agent installed and IAM Instance Profile attached with AmazonSSMManagedInstanceCore. Note: VPN_ID (e.g., vpn-xxxxxxxx), EC2_INSTANCE_ID (e.g., i-0123456789abcdef0), ONPREM_PRIVATE_IP (e.g., 192.168.100.10). Create the function Open AWS Console → Lambda → Create function → Author from scratch.\nConfigure:\nFunction name: vpn-diagnostic-handler (or any name you choose) Runtime: Python 3.11 (or 3.9) Permissions: Use an existing role → choose lambda-vpn-diagnostic-role (created in section C) Click Create function.\nConfigure Environment variables In the function → Configuration tab → Environment variables → Edit → Add environment variables:\nVPN_ID = vpn-xxxxxxxx EC2_INSTANCE_ID = i-0123456789abcdef0 ONPREM_PRIVATE_IP = 192.168.100.10 REGION = ap-southeast-1 (or your region) FORWARD_SNS_ARN = `` (leave blank if not forwarding) Save.\nNote: Do not store the Pre-Shared Key (PSK) in environment variables. If secrets are needed, use AWS Secrets Manager and read them in Lambda.\nAdjust timeout \u0026amp; memory Go to Configuration → General configuration → Edit\nTimeout: set 120 seconds (or 180s for longer tests) Memory: 256 MB Save. Paste Lambda code (full code) In the Code -\u0026gt; Code source tab, open lambda_function.py (or inline editor) and paste the following code: import os import time import json import boto3 import logging logger = logging.getLogger() logger.setLevel(logging.INFO) ssm = boto3.client(\u0026#39;ssm\u0026#39;) ec2 = boto3.client(\u0026#39;ec2\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) # Read env VPN_ID = os.environ.get(\u0026#39;VPN_ID\u0026#39;) EC2_INSTANCE_ID = os.environ.get(\u0026#39;EC2_INSTANCE_ID\u0026#39;) ONPREM_PRIVATE_IP = os.environ.get(\u0026#39;ONPREM_PRIVATE_IP\u0026#39;) REGION = os.environ.get(\u0026#39;REGION\u0026#39;) or boto3.session.Session().region_name FORWARD_SNS_ARN = os.environ.get(\u0026#39;FORWARD_SNS_ARN\u0026#39;) # optional def run_ssm_command(instance_id, commands, timeout=60): resp = ssm.send_command( InstanceIds=[instance_id], DocumentName=\u0026#34;AWS-RunShellScript\u0026#34;, Parameters={\u0026#34;commands\u0026#34;: commands}, TimeoutSeconds=timeout ) cmd_id = resp[\u0026#39;Command\u0026#39;][\u0026#39;CommandId\u0026#39;] logger.info(f\u0026#34;SSM command sent: CommandId={cmd_id}\u0026#34;) end_time = time.time() + timeout while time.time() \u0026lt; end_time: try: inv = ssm.get_command_invocation(CommandId=cmd_id, InstanceId=instance_id) status = inv.get(\u0026#39;Status\u0026#39;) logger.info(f\u0026#34;Invocation status: {status}\u0026#34;) if status in (\u0026#39;Success\u0026#39;, \u0026#39;Failed\u0026#39;, \u0026#39;Cancelled\u0026#39;, \u0026#39;TimedOut\u0026#39;): return inv except ssm.exceptions.InvocationDoesNotExist: pass time.sleep(1) raise TimeoutError(\u0026#34;SSM command invocation timed out\u0026#34;) def describe_vpn(vpn_id): resp = ec2.describe_vpn_connections(VpnConnectionIds=[vpn_id]) return resp.get(\u0026#39;VpnConnections\u0026#39;, []) def build_response_summary(event, vpn_info, ssm_result): summary = { \u0026#34;event\u0026#34;: event if isinstance(event, dict) else str(event), \u0026#34;vpn_info\u0026#34;: vpn_info, \u0026#34;ssm_result\u0026#34;: { \u0026#34;Status\u0026#34;: ssm_result.get(\u0026#39;Status\u0026#39;) if isinstance(ssm_result, dict) else ssm_result, \u0026#34;StandardOutputContent\u0026#34;: ssm_result.get(\u0026#39;StandardOutputContent\u0026#39;) if isinstance(ssm_result, dict) else None, \u0026#34;StandardErrorContent\u0026#34;: ssm_result.get(\u0026#39;StandardErrorContent\u0026#39;) if isinstance(ssm_result, dict) else None } } return summary def lambda_handler(event, context): logger.info(\u0026#34;Received event: %s\u0026#34;, json.dumps(event)) try: alarm_name = event.get(\u0026#39;detail\u0026#39;, {}).get(\u0026#39;alarmName\u0026#39;) or event.get(\u0026#39;AlarmName\u0026#39;) except Exception: alarm_name = None logger.info(f\u0026#34;Alarm name: {alarm_name}\u0026#34;) vpn_info = [] try: if VPN_ID: vpn_info = describe_vpn(VPN_ID) else: vpn_info = {\u0026#34;error\u0026#34;: \u0026#34;VPN_ID not set in environment\u0026#34;} except Exception as e: logger.exception(\u0026#34;Error describing VPN: %s\u0026#34;, e) vpn_info = {\u0026#34;error\u0026#34;: str(e)} ssm_result = {} if EC2_INSTANCE_ID and ONPREM_PRIVATE_IP: commands = [ f\u0026#34;echo \u0026#39;==== ping to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;ping -c 10 {ONPREM_PRIVATE_IP} || true\u0026#34;, f\u0026#34;echo \u0026#39;==== traceroute to {ONPREM_PRIVATE_IP} ====\u0026#39;\u0026#34;, f\u0026#34;traceroute -n {ONPREM_PRIVATE_IP} || true\u0026#34; ] try: inv = run_ssm_command(EC2_INSTANCE_ID, commands, timeout=120) ssm_result = { \u0026#34;Status\u0026#34;: inv.get(\u0026#39;Status\u0026#39;), \u0026#34;StandardOutputContent\u0026#34;: inv.get(\u0026#39;StandardOutputContent\u0026#39;), \u0026#34;StandardErrorContent\u0026#34;: inv.get(\u0026#39;StandardErrorContent\u0026#39;) } except Exception as e: logger.exception(\u0026#34;SSM command failed: %s\u0026#34;, e) ssm_result = {\u0026#34;error\u0026#34;: str(e)} else: ssm_result = {\u0026#34;error\u0026#34;: \u0026#34;EC2_INSTANCE_ID or ONPREM_PRIVATE_IP not configured\u0026#34;} summary = build_response_summary(alarm_name or event, vpn_info, ssm_result) logger.info(\u0026#34;Diagnostic summary: %s\u0026#34;, json.dumps(summary)) if FORWARD_SNS_ARN: try: sns.publish(TopicArn=FORWARD_SNS_ARN, Message=json.dumps(summary), Subject=f\u0026#34;VPN Diagnostic: {alarm_name}\u0026#34;) except Exception as e: logger.exception(\u0026#34;Failed to publish SNS: %s\u0026#34;, e) return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: summary } Click Deploy (if needed). Note: Verify the script runs by testing Lambda (see Testing section below). If EC2 does not have traceroute, consider replacing with tracepath or installing the traceroute package.\nCreate EventBridge Rule (capture CloudWatch Alarm → invoke Lambda) Instead of using SNS, we will use EventBridge to capture the Alarm state change event and invoke Lambda.\nCreate the Rule Open AWS Console → Amazon EventBridge → Rules → Create rule.\nConfigure:\nName: alarm-vpn-tunnel1-to-lambda Description: Forward CloudWatch alarm vpn-tunnel1-down to lambda diagnostic Rule type: Event pattern → choose Custom pattern (JSON). Paste the following event pattern (replace vpn-tunnel1-down with your alarm name if different):\n{ \u0026#34;source\u0026#34;: [\u0026#34;aws.cloudwatch\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;CloudWatch Alarm State Change\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;alarmName\u0026#34;: [\u0026#34;vpn-tunnel1-down\u0026#34;], \u0026#34;state\u0026#34;: { \u0026#34;value\u0026#34;: [\u0026#34;ALARM\u0026#34;] } } } Select targets → Target type: Lambda function → select vpn-diagnostic-handler. Click Create. When you select Lambda as the target, EventBridge automatically adds the resource-based policy permission for Lambda to be invoked by EventBridge. If the permission is missing, see troubleshooting section.\n"
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/3-create-site-to-site-vpn/3-2-configure-vpn/3-2-1-create-vpg/",
	"title": "Create Virtual Private Gateway",
	"tags": [],
	"description": "",
	"content": "Create Virtual Private Gateway (VGW) ℹ️ Overview\nThe Virtual Private Gateway (VGW) is a critical component for a Site-to-Site VPN connection Acts as the AWS-side VPN endpoint Must be attached to the target VPC to establish the connection Steps to Implement Access the AWS VPC Console Navigate to Virtual Private Gateways Click Create Virtual Private Gateway Configure the Virtual Private Gateway Name tag: Enter VPN Gateway ASN: Select Amazon default ASN Click Create virtual private gateway 💡 Pro Tip\nUsing Amazon default ASN is suitable for most cases Custom ASN is only necessary if you have specific BGP routing requirements Attach VGW to the VPC Select Actions Click Attach to VPC Select the target VPC From the dropdown, select VPC ASG Click Attach to VPC ⚠️ Important Note\nEnsure the VGW status changes to Attached before proceeding\nThe attach process may take a few minutes to complete\nVerify the status Check that State shows Attached VGW is now ready for the next VPN configuration steps "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/2-preparation-step/2-1-create-vpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create an Amazon Virtual Private Cloud (VPC) 🔒 Steps to perform\nAccess AWS Management Console Search for the VPC service Select VPC from the search results In the VPC Dashboard Select Your VPCs from the left-hand menu Click Create VPC Configure VPC parameters Resources: Select VPC only Name tag: Enter ASG IPv4 CIDR block: Enter 10.10.0.0/16 ⚠️ Note about Tenancy: Keep the Tenancy option at the default setting (Default). Changing it to Dedicated may limit the types of EC2 instances supported in the VPC.\nConfirm VPC creation Click Create VPC to complete the process Verify the VPC status after creation 💡 DNS Configuration 6. Enable DNS features for the VPC\nSelect Edit VPC settings Open the DNS settings tab Enable DNS hostnames and DNS resolution Save changes "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/3-create-site-to-site-vpn/3-1-create-vpc-for-vpn/",
	"title": "Create VPC for VPN",
	"tags": [],
	"description": "",
	"content": "Set up VPC for Site-to-Site VPN ⚠️ Prerequisites\nAccess to AWS Console with sufficient permissions to create VPC resources Basic understanding of CIDR and subnet planning Create VPC and Subnet Access VPC Dashboard Select Your VPCs Click Create VPC Configure the new VPC Resource type: Select VPC only Name: Enter ASG VPN IPv4 CIDR: Enter 10.11.0.0/16 Click Create VPC Create Public Subnet Go to Subnets Click Create subnet Select VPC ASG VPN Configure Subnet Name: Enter VPN Public Availability Zone: Select ap-southeast-1a IPv4 CIDR: Enter 10.11.1.0/24 Click Create subnet Configure Internet Connectivity Enable Auto-assign Public IP Select subnet VPN Public Click Actions \u0026gt; Edit subnet settings Select Enable auto-assign public IPv4 address Click Save Create Internet Gateway Go to Internet Gateways Click Create internet gateway Name: Enter Internet Gateway VPN Click Create Attach Internet Gateway to VPC Select the newly created IGW Click Actions \u0026gt; Attach to VPC Select VPC ASG VPN Click Attach Configure Route Table Create a new Route Table Go to Route Tables Click Create route table Name: Enter Route table VPN - Public VPC: Select ASG VPN Click Create Add Route for Internet Access Select the Routes tab Click Edit routes Click Add route Destination: Enter 0.0.0.0/0 Target: Select Internet Gateway VPN Click Save changes Associate Subnet Select the Subnet associations tab Click Edit subnet associations Select subnet VPN Public Click Save associations 💡 Pro Tip\nMake sure to review all route and security group configurations Use tags for efficient resource management Keep a record of CIDR ranges for future reference "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/1-introduction/",
	"title": "Introduction to Site-to-Site VPN with BGP and Redundancy",
	"tags": [],
	"description": "",
	"content": "Contents:\nWorkshop Objectives Theoretical Overview Proposed Architecture Real-World Scenario What You Will Learn Tools and AWS Services Used Prerequisites 🎯 Workshop Objectives This workshop walks you through setting up a Site-to-Site VPN connection between an on-premises infrastructure and an Amazon VPC, using BGP (Border Gateway Protocol) for dynamic routing and ensuring high availability through redundant tunnels.\nYou will also learn to:\nMonitor VPN health and metrics. Automate alerting and failure detection. Perform failover testing. Secure tunnels using IAM and best practices. Estimate cost and optimize performance. 🧠 Theoretical Overview 🌐 What is Site-to-Site VPN? Site-to-Site VPN enables secure communication between two private networks over the internet using IPSec encryption. It allows resources on both ends to communicate as if they were on the same local network.\nBenefits: Always-on connection, end-to-end encryption, no manual connection required.\n🧭 Why Use BGP? BGP (Border Gateway Protocol) is a Layer 3 dynamic routing protocol that exchanges routes between Autonomous Systems (AS). In VPN:\n🧠 Learns and advertises routes automatically. 🔁 Supports automatic failover when a tunnel fails. 📈 Optimizes routing based on metrics and reachability. 🔄 No manual static route updates – scales better. 🏗️ Redundancy with Multi-Tunnel VPN AWS provides two IPSec tunnels per VPN connection. With BGP:\nIf one tunnel fails, traffic is rerouted through the second. Both tunnels can be active simultaneously. Ideal for mission-critical environments needing high availability. 🧩 Proposed Architecture An AWS VPC (10.0.0.0/16) with public/private subnets. A simulated on-prem router using VyOS or pfSense. Customer Gateway: represents the on-prem router. Virtual Private Gateway attached to the VPC. Site-to-Site VPN with two IPSec tunnels and BGP. CloudWatch \u0026amp; CloudTrail for monitoring and audit. IAM Role for access control. VPC Flow Logs for traffic visibility. 💡 Real-World Scenario XYZ Corp is migrating part of its workload to AWS, while retaining legacy systems and data centers on-prem.\nRequirements:\nSecure and stable connection between AWS and on-prem. No downtime if a tunnel fails. Dynamic route updates when on-prem IP changes. Monitoring and alerting on VPN health. Solution: Site-to-Site VPN + BGP + Monitoring + Redundancy.\n🎓 What You Will Learn Skill Acquired Description ✅ Create a VPN with redundancy Deploy Site-to-Site VPN with two tunnels ✅ Configure bidirectional BGP Automate routing between AWS and on-prem ✅ Test automatic failover Simulate tunnel failure, validate reroute ✅ Monitor VPN and routing state Use CloudWatch, CloudTrail ✅ Inspect traffic flow Enable VPC Flow Logs ✅ Secure VPN with IAM Least privilege access and strong PSKs ✅ Estimate and optimize costs Understand billing patterns ✅ Document and operationalize Build SOPs for networking team 📦 Tools and AWS Services Used Amazon VPC Virtual Private Gateway (VGW) Customer Gateway (CGW) EC2 Instance (VyOS/pfSense simulator) Site-to-Site VPN BGP Routing CloudWatch \u0026amp; CloudTrail IAM Roles \u0026amp; Policies VPC Flow Logs 🛠️ Prerequisites Basic knowledge of AWS networking (VPC, Subnets, EC2). Familiarity with AWS Console or CLI. Understanding of routing, CIDR, and IPSec concepts. Prior exposure to BGP or static routing is helpful. Experience with Linux or router OS (VyOS/pfSense) is a plus. "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "OVERVIEW Site-to-Site VPN with BGP and Redundancy is a secure, flexible, and highly available connectivity solution between AWS infrastructure and on-premises environments (or between two separate cloud environments).\nThis solution leverages the power of IPSec VPN, the Border Gateway Protocol (BGP), and redundancy mechanisms to ensure continuous connectivity, even in the event of a link or tunnel failure.\nThe architecture is built upon the following core components:\nAWS Virtual Private Gateway (VGW) or AWS Transit Gateway (TGW): The AWS endpoint for managing VPN connections and routing. Customer Gateway (CGW): The device or software on the on-premises side that serves as the counterpart to the AWS gateway. IPSec Tunnels: Two secure tunnels for each VPN connection, operating in parallel to provide fault tolerance. BGP: A dynamic routing protocol that automatically updates route tables, minimizing downtime during network changes or failures. Redundancy \u0026amp; Failover: Mechanisms that automatically reroute traffic when a tunnel or network path becomes unavailable. Key benefits of the solution:\n🔒 High Security – Uses IPSec encryption to protect data during transit. ⚡ Automated Route Updates – BGP dynamically propagates network changes without manual intervention. 🔄 Flexible Redundancy – Two tunnels per VPN connection, with the ability to scale to multiple VPN links for improved resilience. 📈 Scalability – Easily extend connectivity to new sites or subnets without extensive reconfiguration. 💰 Cost Optimization – Reduces dependency on expensive leased lines by leveraging existing internet infrastructure. Common deployment scenarios:\nConnecting an AWS VPC to an on-premises data center for ERP or CRM workloads. Real-time data synchronization between distributed infrastructures. Supporting Hybrid Cloud or Multi-Cloud architectures. Implementing Disaster Recovery (DR) with automatic failover capabilities. In this workshop, we will walk through the complete process of designing, deploying, testing, and monitoring a Site-to-Site VPN with BGP and Redundancy, including:\nDesigning a highly available architecture Configuring BGP Routing Deploying multiple tunnels Setting up automatic failover Integrating monitoring and troubleshooting Implementing cost optimization Performing security compliance checks Building an operational runbook and documentation "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/3-create-site-to-site-vpn/3-2-configure-vpn/3-2-2-create-customer-gateway/",
	"title": "Create Customer Gateway",
	"tags": [],
	"description": "",
	"content": "Create Customer Gateway Access VPC\nSelect Customer Gateways Click Create Customer Gateway In the Create Customer Gateway interface\nIn the Name tag field, enter Customer Gateway In the IP address field, enter the Public IP address of the EC2 Customer Gateway instance Click Create Customer Gateway The creation process for the Customer Gateway will complete in approximately 5 minutes ℹ️ Important Information: According to the architecture design, the Customer Gateway will be deployed in the on-premises VPC environment. In this step, we are registering with AWS the usage of a Customer Gateway with the public IP address of an EC2 instance (Customer Gateway) located in the Auto Scaling Group of the VPN VPC.\n"
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/2-preparation-step/2-2-create-subnet/",
	"title": "Create Subnet",
	"tags": [],
	"description": "",
	"content": "Create a Subnet in Amazon VPC 🔒 Steps to perform\nAccess the VPC interface Select Subnets from the left-hand menu Click Create subnet Select VPC In the Create subnet interface Choose the ASG VPC created earlier Configure the first Subnet Subnet name: Enter Public Subnet 1 Availability Zone: Select ap-southeast-1a IPv4 CIDR block: Enter 10.10.1.0/24 Click Create subnet Confirm successful subnet creation 💡 Create additional Subnets\nRepeat the process to create the following subnets: Public Subnet 2 CIDR: 10.10.2.0/24 AZ: ap-southeast-1b Private Subnet 1 CIDR: 10.10.3.0/24 AZ: ap-southeast-1a Private Subnet 2 CIDR: 10.10.4.0/24 AZ: ap-southeast-1b ⚠️ Note about AWS Availability Zones:\nAWS uses two related concepts:\nAvailability Zone (AZ): The display name (e.g., ap-southeast-1a) AZ ID: The actual internal identifier for the Availability Zone. AWS maps AZ names to AZ IDs differently across accounts to ensure even resource distribution. Configure Auto-assign Public IP ℹ️ Purpose: Allow automatic assignment of public IP addresses to instances launched in the public subnet.\nConfigure Public Subnet 1 Select the subnet from the list Click Actions Choose Edit subnet settings Enable Auto-assign IP Turn on Enable auto-assign public IPv4 address Click Save Repeat the configuration for Public Subnet 2 "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/2-preparation-step/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Overview of AWS VPC Environment ℹ️ Lab Objectives\nBuild a complete VPC environment from scratch Deploy the basic AWS networking components Set up a secure and scalable network architecture ⚠️ Overall Architecture\nIn this lab exercise, we will build a VPC model based on the diagram below:\n🔒 Key Components\nVPC – A dedicated virtual network environment Subnet – Network segments for resources Internet Gateway – Gateway for internet connectivity Route Table – Routing table for managing network traffic Deployment Steps 💡 Execution Process\nCreate VPC Create Subnet Create Internet Gateway Create Route Table "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/6-site-to-site-vpn-lambda-cloudwatch/6-2-testing-troubleshooting/",
	"title": "Testing &amp; Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Testing Test via EventBridge (recommended):\nEventBridge → Rules → select the rule alarm-vpn-tunnel1-to-lambda → Test → Create test event → paste the sample event JSON (provided in the workshop documentation) → Send test event. Check Lambda → Monitoring → View logs in CloudWatch. Test by invoking Lambda directly:\nLambda → select the function → Test → paste {} or a sample event → Run. End-to-end (real scenario):\nTrigger a real alarm (e.g., block UDP 500/4500 outbound to AWS_T1_OUT so that TunnelState = 0) → when the Alarm state changes to ALARM, EventBridge will invoke Lambda → Lambda calls SSM → check the SSM command output. Troubleshooting quick guide Summary table: symptom → possible cause → quick check/command (console \u0026amp; on-prem). Detailed step-by-step instructions follow the table.\nSymptom Possible causes Quick fixes / commands Tunnel DOWN (AWS) PSK mismatch, outside IP blocked, NAT-T blocked (UDP 4500/500) Check AWS Tunnel details; on-prem: show crypto isakmp sa / show crypto ipsec sa or sudo ipsec statusall BGP not established Wrong inside IP, ASN mismatch, TCP 179 blocked, BGP timers Verify inside IPs; verify ASN; show ip bgp summary on the router; check security groups/NACL (BGP runs over inside IPs through VPN) Intermittent packet loss MTU/fragmentation, packet drop on path, IPSec rekey Check IPSec SA counters; reduce MTU; enable DF handling; run continuous ping/iperf Routes not propagated to VPC Route propagation disabled, BGP not advertising VPC → Route Tables → ensure route propagation is enabled for VGW; AWS CLI: aws ec2 describe-route-tables Common troubleshooting scenarios EventBridge does not invoke Lambda: Check the Lambda function’s resource-based policy (Permissions → Resource-based policy). If needed, add it using the CLI:\naws lambda add-permission \\ --function-name vpn-diagnostic-handler \\ --statement-id eventbridge-invoke \\ --action \u0026#34;lambda:InvokeFunction\u0026#34; \\ --principal events.amazonaws.com \\ --source-arn arn:aws:events:\u0026lt;region\u0026gt;:\u0026lt;account-id\u0026gt;:rule/alarm-vpn-tunnel1-to-lambda SSM does not execute the command: Check that the EC2 instance has the SSM Agent installed and the correct Instance Profile attached.\n"
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/3-create-site-to-site-vpn/3-2-configure-vpn/",
	"title": "VPN Connection Configuration",
	"tags": [],
	"description": "",
	"content": "AWS Site-to-Site VPN Configuration ℹ️ Overview\nThis section provides guidance on setting up an AWS Site-to-Site VPN connection. Includes the configuration of the Virtual Private Gateway (VGW) and Customer Gateway (CGW). Enables secure connectivity between two VPCs through IPSec tunnels. 🔒 Key Components\nVirtual Private Gateway (VGW): AWS-side VPN endpoint. Customer Gateway (CGW): Represents the customer-side VPN device. VPN Connection: IPSec connection between the VGW and CGW. Deployment Steps 💡 Configuration Process\nCreate VPG Create Customer Gateway Create VPN Connection "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/2-preparation-step/2-3-create-internet-gateway/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": " Create an Internet Gateway in Amazon VPC 🔒 Steps to Perform\nAccess the VPC console\nSelect Internet Gateways from the left menu Click Create internet gateway Configure the Internet Gateway\nIn Name tag, enter Internet Gateway Click Create internet gateway Confirm that the Internet Gateway was successfully created 💡 Connect to VPC\nAttach the Internet Gateway to the VPC\nClick Actions Select Attach to VPC Choose VPC ASG from the list (VPC ID will be automatically filled in) Click Attach internet gateway ⚠️ Verify Status 5. After successfully attaching:\nThe State of the Internet Gateway will change to Attached The IGW is now ready to route internet traffic for the VPC "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/3-create-site-to-site-vpn/",
	"title": "Create Site-to-Site-VPN",
	"tags": [],
	"description": "",
	"content": "AWS Site-to-Site VPN ℹ️ Overview\nAWS Site-to-Site VPN enables you to create a secure connection between an on-premises data center or branch office network and an Amazon VPC. Supports both hardware VPN appliances and software-based VPN solutions depending on requirements. Uses IPSec tunnels to encrypt data in transit over the Internet. Requires configuration of a Virtual Private Gateway (VPG) on the AWS side and a Customer Gateway (CGW) on the customer side. Key Components 🔒 Virtual Private Gateway (VPG)\nThe VPN endpoint deployed within AWS. Connects directly to a VPC via VPC attachments. Manages and orchestrates VPN connections. Supports both dynamic routing (BGP) and static routing. Each VPC can attach to only one VPG at a time. 🔒 Customer Gateway (CGW)\nRepresents the VPN device on the customer (on-premises) side. Can be a hardware device (Cisco, Juniper, Fortinet, etc.) or software-based (StrongSwan, OpenVPN). Requires a single static public IP address per AWS Region. Must specify an ASN (Autonomous System Number) if using BGP. 🔒 Redundancy \u0026amp; BGP\nEach AWS VPN connection creates two independent IPSec tunnels to ensure redundancy. Uses BGP to dynamically exchange routes between AWS and the on-premises network. Automatic Failover: When one tunnel fails, BGP automatically updates routes and shifts traffic to the other tunnel without service interruption. Routing can be optimized by configuring BGP metrics and AS_PATH prepending to prioritize one tunnel as primary and the other as backup. 🔒 CloudWatch Alarm \u0026amp; Monitoring\nUse Amazon CloudWatch Metrics to monitor VPN tunnel status (TunnelState, TunnelDataIn, TunnelDataOut). Create CloudWatch Alarms to alert when a tunnel goes down. Integrate with SNS (Simple Notification Service) to send notifications via email/SMS. 🔒 Automation with Lambda\nUse AWS Lambda to automate failover processes or incident handling. Integrate with CloudWatch Events to trigger Lambda when a tunnel connection is lost. Automatically adjust routes in VPC Route Tables or update on-premises firewall rules when changes occur. Deployment Process in AWS Management Console Create a Virtual Private Gateway (VPG) and attach it to the VPC. Create a Customer Gateway (CGW) with the public IP and ASN of the on-premises device. Create a Site-to-Site VPN Connection, selecting either Dynamic (BGP) or Static routing. Download the VPN configuration file compatible with your device (Cisco, Juniper, Fortinet, etc.). Configure the on-premises VPN device using the downloaded file. Check tunnel status in the AWS Console. Configure CloudWatch Alarm and SNS for monitoring and alerting. Test failover by temporarily disabling one tunnel and verifying traffic continuity. Verify BGP routes have been exchanged successfully between both sides. "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/3-create-site-to-site-vpn/3-2-configure-vpn/3-2-3-create-vpn-connection/",
	"title": "Create VPN Connection",
	"tags": [],
	"description": "",
	"content": "Configure AWS Site-to-Site VPN Connection Create VPN Connection Access AWS VPC Console Navigate to Site-to-Site VPN Connections Click Create VPN Connection Configure basic VPN Connection settings Name tag: Enter VPN Connection Target Gateway Type: Select Virtual Private Gateway Virtual Private Gateway: Select the created VPN Gateway Customer Gateway: Select Existing Customer Gateway ID: Select the created Customer Gateway Configure Routing Routing Options: Select Dynamic You must select Dynamic for BGP configuration; Static is more suitable for environments with minimal changes.\nNote:\nRecord, screenshot, or copy the information and store it somewhere safe. Go to VPN -\u0026gt; VPN Details Initialize VPN Connection Review configuration Click Create VPN Connection ⚠️ Note\nThe VPN creation process may take 5–10 minutes.\nWait until the status changes to Available before proceeding.\nConfigure Route Propagation Configure for Public Route Table Access Route Tables in VPC Console Select the route table for the Public subnet Go to the Route Propagation tab Click Edit route propagation Enable Route Propagation Select Enable for the Virtual Private Gateway Click Save Verify status Check that Route Propagation has changed to Yes Repeat the process for Private Route Table Follow the same steps as above Ensure route propagation is enabled for both public and private subnets 🔒 Security Note\nRoute propagation automatically updates route tables when changes occur. Ensure it is only enabled for the necessary route tables to avoid security risks. "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/6-site-to-site-vpn-lambda-cloudwatch/6-3-performance-monitroing-dashboard/",
	"title": "Performance monitoring &amp; Dashboard",
	"tags": [],
	"description": "",
	"content": "Performance monitoring \u0026amp; Dashboard (CloudWatch) This section provides detailed instructions on configuring performance and Site-to-Site VPN status monitoring with Amazon CloudWatch, creating a visual dashboard, and setting retention policies for related logs.\nMetrics to monitor (namespace AWS/VPN) Core metrics to track:\nTunnelState (1 = up, 0 = down)\nUsed to detect when the tunnel is down. TunnelDataIn / TunnelDataOut (bytes)\nInbound/outbound traffic through each tunnel — used to detect spikes or traffic shifts during failover. TunnelPacketDrop / TunnelPacketLoss (if provided by the provider)\nIf available, used to detect packet loss/quality issues. TunnelLatency (if provided by the provider)\nUsed to monitor latency between tunnel endpoints. Note: Metrics may appear per-tunnel (separated by tunnel index) — when selecting metrics, filter by VpnConnectionId and TunnelIndex to ensure you are monitoring the correct tunnel.\nCreating a detailed Dashboard (CloudWatch) Step-by-step guide to create a vpn-dashboard and add the necessary widgets.\nCreate the dashboard Open AWS Console → CloudWatch → Dashboards → Create dashboard. Name it: vpn-dashboard → Create dashboard. Choose a layout (e.g., Grid or Time series) — Grid is more flexible for adding multiple widgets. Add a Line graph widget for traffic In the dashboard, click Add widget → select Line (Line graph). In the Add metric modal, select Browse → AWS/VPN → By Tunnel (or By VPN Connection depending on the interface). Select TunnelDataIn and TunnelDataOut metrics for both tunnels (from the same VPN connection) — you can add multiple series in the same widget. Adjust: Statistic = Sum or Average (usually Sum for bytes), Period = 1 minute or 5 minutes as needed. Optionally, enable Y axis (left/right) if you want to display two metrics with different scales. Click Create widget. Add Single value widgets for TunnelState Click Add widget → select Single value. Select metric AWS/VPN → TunnelState for Tunnel 1 (filter by VpnConnectionId and TunnelIndex=1). Statistic: Minimum so that if the value is 0 at any point, it will show 0. Title: Tunnel 1 State → Create widget. Repeat for Tunnel 2 (TunnelIndex=2) to have separate status widgets. Add state alarms \u0026amp; annotations You can add annotations (text) or an Alarm status widget if you want to display alarm status on the dashboard. Add a Text widget to include a short runbook (e.g., quick recovery steps when a tunnel is down). Metric Math (optional) To view the total traffic across both tunnels, when adding a widget, select Add math expression and use an expression such as: m1 + m2 (where m1 = TunnelDataOut t1, m2 = TunnelDataOut t2). Name the expression (e.g., TotalDataOut) for easier tracking. Customize time range \u0026amp; refresh In the top corner of the dashboard, select a time range (Last 1 hour / 3 hours / 24 hours) and a refresh interval (Auto / 1 minute / 5 minutes). Save \u0026amp; share Click Save dashboard. You can export the link (View in Console) or enable share via IAM so the operations team can access it. CloudWatch Logs retention (set retention for Lambda/SSM logs) Ensure logs are not stored indefinitely to avoid increasing costs.\nConfigure retention for each Log Group Open CloudWatch → Logs → Log groups. Locate the Lambda log group: /aws/lambda/vpn-diagnostic-handler → select the log group. Click Actions → Edit retention → choose 90 days (or your policy) → Save. Repeat for the Systems Manager (SSM) command output log group if applicable (e.g., /aws/ssm/commands or your custom name). Logging volume considerations Avoid excessive (verbose) logging in Lambda when running in production. Use LOG_LEVEL to adjust. Use CloudWatch Logs Insights to run queries instead of exporting all logs to S3. "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/6-site-to-site-vpn-lambda-cloudwatch/6-4-cost-optimization/",
	"title": "Cost optimization",
	"tags": [],
	"description": "",
	"content": "Cost optimization This section provides guidance on optimizing costs related to VPN, data transfer, CloudWatch, and EC2 test machines.\nUnderstanding VPN costs VPN hourly: AWS charges by connection-hour for each Site-to-Site VPN connection (each connection has 2 tunnels).\nExample assumption: 0.05 USD/connection-hour. If maintaining 1 connection for 24 hours: 24 × 0.05 = 1.2 USD/day. If testing 5 days/week, 4 weeks: 5 × 4 × 1.2 = 24 USD/month. Optimization: In lab or workshop environments, disable the VPN when not needed to save ~1 USD/day.\nData transfer: Outbound data (to the Internet) may be charged per GB (e.g., 0.09 USD/GB).\nExample for transferring 50 GB: 50 × 0.09 = 4.5 USD. No specific prices are listed here — check Billing / Cost Explorer for rates per region and account.\nMonitoring Data Transfer with Cost Explorer Go to Billing \u0026amp; Cost Management → Cost Explorer → Launch Cost Explorer. Create a custom report: Group by: Service → filter Amazon VPC / AWS VPN / Data Transfer. Time range: Last 30 days. Add filter: Usage Type contains DataTransfer-Out. Save the report for weekly tracking. Optimizing CloudWatch and Logs Retention: Set reasonable retention (e.g., 30–90 days) for important log groups. Metric Filters: Create only necessary filters — each filter may incur ingestion costs. Log verbosity: In Lambda, use INFO or WARN for production; enable DEBUG only for troubleshooting. EC2 and lab costs Use small instances such as t2.micro (~0.0104 USD/hour) or t3.small (~0.0208 USD/hour) for router simulation VMs. Example: t2.micro running 24 h = 24 × 0.0104 ≈ 0.25 USD/day. In production, consider network throughput — choose instances with ENA/high throughput. Stop or terminate EC2 test instances when not in use. Budgets \u0026amp; Alerts AWS Budgets → Create budget: Budget type: Cost budget or Usage budget (Data Transfer GB). Example: set threshold at 80% and 100% → send alerts via email/SNS. Create Cost Anomaly Detection to get alerts when unexpected charges occur. Tagging \u0026amp; Chargeback Tag resources (VPN, EC2, VPC) clearly by project or team — this helps allocate costs to the right group. Use Tag Policy to ensure all new resources are tagged with required keys (e.g., Project, Owner, Environment). Sample cost table (assumptions) Resource Usage Cost unit Estimated cost VPN connection 24 h × 1 conn 0.05 USD/connection-hour 1.2 USD/day EC2 (t2.micro) 24 h × 30 days ~0.0104 USD/hour ~7.5 USD/month Data transfer 50 GB outbound 0.09 USD/GB 4.5 USD CloudWatch logs retention reduce to 30 days lower log volume → lower cost savings depend on volume Metric filters limit filters ingestion cost savings ~0.03–0.1 USD/filter/day Total (lab scenario) VPN + EC2 + Data ~13.2 USD/month Note: This is a hypothetical example to illustrate potential costs — replace with actual figures from your Cost Explorer and Billing Dashboard.\n"
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/2-preparation-step/2-4-create-route-table/",
	"title": "Create Route Table",
	"tags": [],
	"description": "",
	"content": "Create a Route Table in Amazon VPC 🔒 Steps to perform\nAccess the VPC console Select Route Tables from the left menu Click Create route table Configure the Route Table Name: Enter Route table-Public VPC: Select VPC ASG (VPC ID will be auto-filled) Click Create route table Confirm successful creation of the Route Table 💡 Configure routing\nAdd a route for the Internet Gateway Click Actions Select Edit routes Configure a new route Click Add route Destination: Enter 0.0.0.0/0 (represents the internet) Target: Select Internet Gateway and choose the created IGW Click Save changes ⚠️ Associate with Subnet\nConfigure subnet associations Select the Subnet associations tab Click Edit subnet associations Select the public subnets Expand the Subnet ID column to view details Select both created public subnets Click Save associations Confirm successful subnet associations configuration "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/4-redundancy-testing-failover/",
	"title": "Redundancy Testing &amp; Failover",
	"tags": [],
	"description": "",
	"content": "🎯 Objective Validate the redundancy and automatic failover capabilities of a Site-to-Site VPN architecture using BGP.\nEnsure that when one tunnel experiences a failure, traffic is automatically rerouted through the remaining active tunnel without service disruption.\n📚 Theoretical Overview In a Site-to-Site VPN configuration with BGP, AWS provides two IPsec tunnels to enhance availability.\nBGP automatically detects when a tunnel goes down and withdraws the corresponding BGP route from the routing table.\nTraffic is then rerouted through the remaining active tunnel.\nRedundancy testing helps:\nConfirm BGP failover functions as expected. Ensure dynamic routes are updated promptly. Measure the actual downtime during a failure event. 🛠 Steps in AWS Management Console Step 1 — Verify Initial State Open AWS Management Console → navigate to VPC. Select Site-to-Site VPN Connections. Choose your VPN connection. Switch to the Tunnel Details tab. Verify both Tunnel 1 and Tunnel 2 show: Status: UP BGP Status: UP Step 2 — Check Routing Table In VPC, go to Route Tables. Select the route table associated with the VPC subnet under test. View the Routes tab. Confirm that routes to the on-premises network have Target as: vgw-xxxxxxxx or tgw-xxxxxxxx (depending on the architecture) Record ASN, prefix, and next hop from the BGP routes. Step 3 — Simulate Failure on Tunnel 1 This step is performed on the on-premises side or by temporarily altering configuration to bring down Tunnel 1.\nCommon methods:\nOn on-premises device: shut down the interface or IPsec policy for Tunnel 1. If on-prem access is not available: use AWS CLI/Console to disable Tunnel 1 by temporarily setting an incorrect Pre-shared Key (for testing only, revert afterwards). Step 4 — Observe Failover In the Tunnel Details tab, watch Tunnel 1 status change from UP → DOWN. Ensure Tunnel 2 remains UP. In Route Tables, refresh and confirm: The BGP route associated with Tunnel 1 is withdrawn. Traffic is now flowing through Tunnel 2. Perform ping/traceroute from an EC2 instance in the VPC to an on-prem server to confirm no service interruption. Step 5 — Restore Tunnel 1 Restore the correct configuration for Tunnel 1 on the on-premises device. Observe Tunnel 1 return to UP state with BGP Established. Verify that BGP has re-advertised the routes and both tunnels are active. Step 6 — Repeat for Tunnel 2 Repeat the procedure for Tunnel 2 to confirm bidirectional failover works as expected. 📈 Measuring Failover Time Use CloudWatch Metrics for the VPN connection: Go to CloudWatch → Metrics → VPN. Monitor metrics TunnelState, BGPStatus, TunnelDataIn/Out. Record the time from tunnel down event to when traffic resumes via the alternate tunnel. 💰 Cost Considerations Keeping both tunnels in an UP state does not incur additional fixed VPN charges, but data transfer through either tunnel is billed. Repeated testing may generate additional CloudWatch Logs/Alarms charges. 🔒 Security Notes After testing (e.g., changing Pre-shared Key or disabling a tunnel), restore all original parameters. Perform tests during maintenance windows or with explicit approval from the operations team. ✅ Expected Outcome:\nWhen one tunnel goes down, traffic automatically switches to the remaining tunnel. Actual downtime should be limited to BGP detection time plus route propagation delay (typically 20–30 seconds). "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/5-alarm-tunnelstate-cloudwatch/",
	"title": "Create an Alarm to Monitor TunnelState in AWS CloudWatch",
	"tags": [],
	"description": "",
	"content": "Create an Alarm to Monitor TunnelState in AWS CloudWatch The objective of this step is to configure monitoring for the status of each VPN tunnel using Amazon CloudWatch. When a tunnel encounters an issue (TunnelState = 0), the system will automatically send an alert so that the technical team can immediately perform failover or troubleshooting.\nSteps in AWS Management Console Access CloudWatch Open the CloudWatch service in the AWS Management Console. In the left-hand menu, select Metrics → All metrics. Select the TunnelState metric\nSelect namespace: AWS/VPN. Choose filter mode: By Tunnel. Find the TunnelState metric for the tunnel you want to monitor (e.g., Tunnel 1). Check the box to select this metric. Create an alarm\nClick Actions (top right) → Create alarm. Configure alarm conditions Metric name: TunnelState Statistic: Minimum (ensures that if TunnelState = 0 at any point in the period, the alarm will trigger). Period: 1 minute Threshold type: Static Whenever TunnelState is: Select Lower/Equal → enter value 0 Configure actions Alarm state trigger: In alarm Send notification to: Select an existing SNS topic or create a new one. If creating a new topic: Choose Create new topic Enter a topic name (e.g., vpn-alerts) Enter the email address to receive notifications AWS will send a confirmation email → open the email and click the confirmation link to activate. Name and create the alarm Alarm name: e.g., VPN-Tunnel1-Down Description: “Alert when VPN Tunnel 1 is down (TunnelState=0)” Click Create alarm to complete. Repeat for Tunnel 2 Go back to All metrics → AWS/VPN → By Tunnel and find the TunnelState metric for Tunnel 2. Create a similar alarm to ensure both tunnels are monitored. Expected result When a tunnel is down, the TunnelState value will switch to 0. The CloudWatch Alarm will trigger and send an email alert to the technical team. The technical team can monitor the failover process to the standby tunnel and take necessary remediation actions. "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/6-site-to-site-vpn-lambda-cloudwatch/6-5-checkin-aws-console/",
	"title": "Verify Directly on AWS Management Console",
	"tags": [],
	"description": "",
	"content": "Check Tunnel \u0026amp; BGP Status VPC Console → Site-to-Site VPN Connections → select the VPN connection.\nOpen the Tunnel Details tab:\nVerify Status (UP/DOWN) for Tunnel 1 \u0026amp; Tunnel 2. Verify BGP Status (Established / Idle). Copy Outside IPs and Inside IPs to compare with the on-prem configuration. Check CloudWatch Metrics CloudWatch → Metrics → All metrics → AWS/VPN → By Tunnel. View the TunnelState metric to identify downtime events. View TunnelDataIn/Out to detect traffic spikes or rerouting events. Check Route Propagation VPC → Route Tables → select the route table of the subnet that needs to reach on-prem. Route propagation tab → ensure VGW is enabled. Routes tab → verify that the route for the on-prem CIDR points to vgw-xxxx. Verify on On-Premises Device (Sample Commands) The commands below are for reference only; syntax may vary depending on the vendor (Cisco/Juniper/VyOS/pfSense).\nCheck ISAKMP / IKE SA Cisco IOS: show crypto isakmp sa show crypto ipsec sa VyOS / strongSwan: sudo ipsec statusall sudo swanctl --list-sas # nếu dùng swanctl Check BGP Cisco: show ip bgp summary show ip bgp neighbors VyOS: show ip bgp summary Check Firewall / NAT Verify that firewall rules allow UDP 500/4500, and that the outside IP is not NATed (or NATed correctly). Use tcpdump/wireshark to capture packets on the public interface:\nsudo tcpdump -n -i eth0 port 500 or port 4500 Check MTU / Fragmentation On the on-prem device, try pinging with the DF flag and reduced MTU: ping -M do -s 1400 \u0026lt;ONPREM_PEER_IP\u0026gt; If ping succeeds with smaller sizes but fails with larger ones, consider lowering MTU or enabling MSS clamping on the firewall. ⚠️ Final Notes\nPerform all tests during a maintenance window or notify relevant teams in advance. Do not make changes to both tunnels simultaneously when testing failover. Store secrets (PSK, webhook) in AWS Secrets Manager instead of hardcoding them in Lambda environment variables. "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/6-site-to-site-vpn-lambda-cloudwatch/",
	"title": "Site-to-Site VPN with Lambda Monitoring CloudWatch Activity",
	"tags": [],
	"description": "",
	"content": "Overview of Steps This section provides a quick understanding of the workflow and the main steps in the workshop — read this part before executing the detailed steps below.\nObjective: Deploy a Site-to-Site VPN with BGP and redundancy, set up monitoring, automate failover using Lambda/EventBridge, optimize costs, and provide a troubleshooting runbook.\nSummary of the main steps (recommended order):\nPreparation \u0026amp; input information — Identify VPC, on-prem CIDR, router public IP, ASN, and a test EC2 instance (SSM enabled). Create and configure VPN (in VPC Console) — Create VGW, Customer Gateway, and VPN Connection (dynamic BGP, 2 tunnels). (See the detailed sections earlier in the documentation.) Verify BGP \u0026amp; redundancy — Ensure both tunnels are UP and BGP is Established; simulate failover to check route propagation. Set up monitoring — Create CloudWatch metrics \u0026amp; Alarms for TunnelState, TunnelDataIn/Out; configure the vpn-dashboard for visualization. Automate incident handling — Create an IAM Role for Lambda (section L), deploy the diagnostic Lambda (section M), and configure the EventBridge rule (section E/N) to invoke Lambda when an Alarm is in ALARM state. End-to-end testing — Simulate a tunnel down, observe CloudWatch Alarm → EventBridge → Lambda → SSM invocation and review ping/traceroute results. Cost optimization \u0026amp; logging — Set retention for CloudWatch Logs, monitor Data Transfer via Cost Explorer, and use Budgets/Alerts. Prepare runbook \u0026amp; troubleshooting — Use the quick guide table (section 15) for rapid incident resolution. Clean up resources — After completing the lab, delete resources (Lambda, EventBridge rule, VPN, VGW, CGW, VPC if applicable) to avoid incurring additional costs. Safety \u0026amp; operational notes:\nAlways perform testing during a maintenance window and notify the operations team. Do not change both tunnels simultaneously when testing failover. Keep secrets (PSK, webhooks) in AWS Secrets Manager — do not store them as plaintext environment variables. "
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/7-cleanup-resource/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "Delete VPC Endpoints Go to the Endpoints section in the VPC Console Select Action Select Delete VPC endpoints Enter “delete” to confirm Delete VPN Resources ℹ️ Info: VPN resources need to be deleted in the proper order to avoid dependency errors.\nDelete VPN Site-to-Site connection Delete Virtual Private Gateway First, detach the Virtual Private Gateway from the VPC (if attached) Then delete the Virtual Private Gateway Delete Customer Gateway Delete VPC Delete VPC ASG VPN Delete VPC ASG Delete Alarms in CloudWatch Metrics Select All alarms on the left under Alarms, choose the Alarm to delete, then select Action → Delete Delete EventBridge Rule Open AWS Management Console. Search for and select the Amazon EventBridge service. In the left menu, select Rules. From the rules list, find the Rule created during the workshop (e.g., Alarm-to-Lambda-Rule). Check the checkbox for that rule. In the top-right corner, select Actions → Delete. A confirmation dialog will appear, enter Delete (if required) and click Delete to confirm rule deletion. Delete AWS Lambda Function From the AWS Management Console, search for and open the Lambda service. From the functions list, find the function created (e.g., vpn-diagnostic-handler). Click the function name to open details. In the top-right corner, select Actions → Delete function. A confirmation dialog will appear, enter delete (if required) and click Delete to remove the function. Delete IAM Role \u0026amp; Policy From the AWS Management Console, search for and select the IAM service. In the left menu, select Roles. Find the IAM Role created for Lambda (e.g., lambda-vpn-diagnostic-role). Click the role name to open details. In the top-right corner, select Delete role. In the confirmation dialog, click Yes, Delete. If this role is associated with a custom policy (created in the workshop): In the IAM left menu, select Policies. Find the policy created (e.g., lambda-vpn-diagnostic-policy). Check the policy → Actions → Delete. Confirm policy deletion. Check Other Resources (if any) If you created additional CloudWatch Alarms during the workshop, you can delete them: Open Amazon CloudWatch. Select Alarms → find the alarm created → select Actions → Delete. Review all AWS services used in the workshop to ensure there are no active resources remaining (VPC, VPN, Gateway, EC2, S3, \u0026hellip; if applicable). 🔒 Security Note: When deleting a VPC, all related resources such as subnets, route tables, network ACLs, and security groups will also be deleted. However, resources such as NAT Gateways, VPC Endpoints, and VPN Connections must be deleted separately before deleting the VPC.\nNOTE: Double-check all services to ensure that there are NO running or undeleted services to avoid incurring long-term charges.\nCheck all AWS service regions to ensure that you have NOT missed any services in other regions.\n"
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/FCJ_Workshop_VuNgocQuang/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]